{"frontMatter":{"slug":"pangram-checker","title":"Pangram Checker","description":"Write a programme to check Pangram sentence","tags":["c","cpp","python","java","js","go","cs"],"contributors":["ssavi-ict","Regis-Caelum","julyvjo","umaxyon"]},"latestUpdateDate":"2022-06-25T04:33:33Z","contentHtml":"<h2>Write a programme to check Pangram sentence</h2>\n<p>A pangram is a sentence containing every letter in the English alphabet.</p>\n<pre><code>Input  : The quick brown fox jumps over the lazy dog\nOutput : Pangram sentence\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h>\n\nint main()\n{\n\n    char str[100];\n    printf(\"Input  : \");\n    scanf(\"%[^\\n]s\", str);\n\n    char isPangram;\n\n    for (char i = 'a'; i &#x3C;= 'z'; i++)\n    {\n        int j;\n        for (j = 0; str[j] != '\\0'; j++)\n        {\n            if (str[j] >= 'A' &#x26;&#x26; str[j] &#x3C;= 'Z')\n            {\n                str[j] += 32;\n            }\n            if (str[j] == i)\n            {\n                break;\n            }\n        }\n        if (str[j] == '\\0')\n        {\n            isPangram = 'n';\n            break;\n        }\n    }\n    printf(\"Output : \");\n    if (isPangram == 'n')\n    {\n        printf(\"Not a pangram sentence\\n\");\n    }\n    else\n    {\n        printf(\"Pangram Sentence\\n\");\n    }\n\n    return 0;\n}\n</code></pre>\n<pre><code>#include &#x3C;iostream>\n\nusing namespace std;\n\nint main()\n{\n    char str[100];\n    cout &#x3C;&#x3C; \"Input  : \";\n    scanf(\"%[^\\n]s\", str);\n\n    char isPangram;\n\n    for (char i = 'a'; i &#x3C;= 'z'; i++)\n    {\n        int j;\n        for (j = 0; str[j] != '\\0'; j++)\n        {\n            if (str[j] >= 'A' &#x26;&#x26; str[j] &#x3C;= 'Z')\n            {\n                str[j] += 32;\n            }\n            if (str[j] == i)\n            {\n                break;\n            }\n        }\n        if (str[j] == '\\0')\n        {\n            isPangram = 'n';\n            break;\n        }\n    }\n\n    cout &#x3C;&#x3C; \"Output : \";\n    if (isPangram == 'n')\n    {\n        cout &#x3C;&#x3C; \"Not a pangram sentence\\n\";\n    }\n    else\n    {\n        cout &#x3C;&#x3C; \"Pangram Sentence\\n\";\n    }\n\n    return 0;\n}\n</code></pre>\n<pre><code>input_string = input('Input  : ')\n\ninput_string = str.lower(input_string)\n\nalphabets = set({})\n\nfor i in input_string:\n    if 'a' &#x3C;= i &#x3C;= 'z':\n        alphabets.add(i)\n\nif len(alphabets) == 26:\n    print('Output : Pangram Sentence')\nelse:\n    print('Output : Not a pangram sentence')\n</code></pre>\n<pre><code>import java.util.HashMap;\nimport java.util.Scanner;\n\npublic class PangramChecker {\n\n\tpublic static void main(String[] args) {\n\t\tString alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\t\tHashMap&#x3C;Character, Boolean> letters = new HashMap&#x3C;Character, Boolean>();\n\t\tboolean pangram = true;\n\t\tScanner sc = new Scanner(System.in);\n\n\t\t// read input\n\t\tSystem.out.print(\"Input  : \");\n\t\tString input = sc.nextLine();\n\n\t\t// convert string to lower case\n\t\tinput = input.toLowerCase();\n\n\t\t// iterate for each character in input\n\t\tfor (int i = 0; i &#x3C; input.length(); i++) {\n\t\t\tletters.put(input.charAt(i), true);\n\t\t}\n\n\t\t// iterate to check if every alphabet character is in the hashmap\n\t\tfor (int i = 0; i &#x3C; alphabet.length(); i++) {\n\t\t\t// if an alphabet character is missing then set pangam to false\n\t\t\tif (letters.get(alphabet.charAt(i)) == null) {\n\t\t\t\tpangram = false;\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.print(\"Output : \");\n\t\tSystem.out.println(pangram ? \"Pangram Sentence\" : \"Not a pangram sentence\");\n\n\t\tsc.close();\n\t}\n}\n</code></pre>\n<pre><code>function isPangram(input) {\n  const alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n  const letters = {};\n  let pangram = true;\n\n  // add an entry on \"letters\" object for every character in input\n  for (let i = 0; i &#x3C; input.length; i++) {\n    // convert the read character to lowercase\n    char = input.charAt(i).toLowerCase();\n    letters[char] = true;\n  }\n\n  // iterate through the object for every letter in alphabet\n  alphabet.forEach((letter) => {\n    // if the letter is not inside of the \"letters\" object then set pangram to false\n    if (!letters[letter]) {\n      pangram = false;\n    }\n  });\n\n  return pangram;\n}\n\nconst input = \"a quick brown fox jumps over the lazy dog\";\nconsole.log(\"Input  :\", input);\nconsole.log(\n  \"Output :\",\n  isPangram(input) ? \"Pangram Sentence\" : \"Not a pangram sentence\"\n);\n</code></pre>\n<pre><code>package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tfmt.Print(\"Input  : \")\n\t// Scanner can read line with space\n\tsc := bufio.NewScanner(os.Stdin)\n\n\tif sc.Scan() {\n\t\tstr := strings.ToLower(sc.Text())\n\n\t\tcharMap := make(map[string]struct{})\n\n\t\tfor i := 0; i &#x3C; len(str); i++ {\n\t\t\t// 97 == 'a', 122 == 'z' (ascii code)\n\t\t\tif 97 &#x3C;= str[i] &#x26;&#x26; str[i] &#x3C;= 122 {\n\t\t\t\tcharMap[string(str[i])] = struct{}{}\n\t\t\t}\n\t\t}\n\n\t\tif len(charMap) == 26 {\n\t\t\tfmt.Println(\"Output : Pangram Sentence\")\n\t\t} else {\n\t\t\tfmt.Println(\"Output : Not a Pangram Sentence\")\n\t\t}\n\t}\n}\n</code></pre>\n<pre><code>using System;\nusing System.Collections.Generic;\n\npublic class PangramChecker\n{\n    public static void Main(string[] args)\n    {\n        Console.Write(\"Input  : \");\n        var str = Console.ReadLine();\n        if (str == null)\n        {\n            Console.WriteLine(\"Input Error\");\n            return;\n        }\n\n        var chars = str.ToCharArray();\n        var hs = new HashSet&#x3C;char>();\n\n        for (int i = 0; i &#x3C; chars.Length; i++)\n        {\n            int c = (int) chars[i];\n\n            // 97 == 'a', 122 == 'z' (ascii code)\n            if (97 &#x3C;= c &#x26;&#x26; c &#x3C;= 122) hs.Add(chars[i]);\n        }\n\n        Console\n            .WriteLine(\"Output : {0}Pangram Sentence\",\n            hs.Count == 26 ? \"\" : \"Not a \");\n    }\n}\n</code></pre>\n","markdown":"\n## Write a programme to check Pangram sentence\n\nA pangram is a sentence containing every letter in the English alphabet.\n\n```txt\nInput  : The quick brown fox jumps over the lazy dog\nOutput : Pangram sentence\n```\n\n---\n\n<CodeBlock>\n\n```c\n#include <stdio.h>\n\nint main()\n{\n\n    char str[100];\n    printf(\"Input  : \");\n    scanf(\"%[^\\n]s\", str);\n\n    char isPangram;\n\n    for (char i = 'a'; i <= 'z'; i++)\n    {\n        int j;\n        for (j = 0; str[j] != '\\0'; j++)\n        {\n            if (str[j] >= 'A' && str[j] <= 'Z')\n            {\n                str[j] += 32;\n            }\n            if (str[j] == i)\n            {\n                break;\n            }\n        }\n        if (str[j] == '\\0')\n        {\n            isPangram = 'n';\n            break;\n        }\n    }\n    printf(\"Output : \");\n    if (isPangram == 'n')\n    {\n        printf(\"Not a pangram sentence\\n\");\n    }\n    else\n    {\n        printf(\"Pangram Sentence\\n\");\n    }\n\n    return 0;\n}\n```\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    char str[100];\n    cout << \"Input  : \";\n    scanf(\"%[^\\n]s\", str);\n\n    char isPangram;\n\n    for (char i = 'a'; i <= 'z'; i++)\n    {\n        int j;\n        for (j = 0; str[j] != '\\0'; j++)\n        {\n            if (str[j] >= 'A' && str[j] <= 'Z')\n            {\n                str[j] += 32;\n            }\n            if (str[j] == i)\n            {\n                break;\n            }\n        }\n        if (str[j] == '\\0')\n        {\n            isPangram = 'n';\n            break;\n        }\n    }\n\n    cout << \"Output : \";\n    if (isPangram == 'n')\n    {\n        cout << \"Not a pangram sentence\\n\";\n    }\n    else\n    {\n        cout << \"Pangram Sentence\\n\";\n    }\n\n    return 0;\n}\n```\n\n```python\ninput_string = input('Input  : ')\n\ninput_string = str.lower(input_string)\n\nalphabets = set({})\n\nfor i in input_string:\n    if 'a' <= i <= 'z':\n        alphabets.add(i)\n\nif len(alphabets) == 26:\n    print('Output : Pangram Sentence')\nelse:\n    print('Output : Not a pangram sentence')\n```\n\n```java\nimport java.util.HashMap;\nimport java.util.Scanner;\n\npublic class PangramChecker {\n\n\tpublic static void main(String[] args) {\n\t\tString alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\t\tHashMap<Character, Boolean> letters = new HashMap<Character, Boolean>();\n\t\tboolean pangram = true;\n\t\tScanner sc = new Scanner(System.in);\n\n\t\t// read input\n\t\tSystem.out.print(\"Input  : \");\n\t\tString input = sc.nextLine();\n\n\t\t// convert string to lower case\n\t\tinput = input.toLowerCase();\n\n\t\t// iterate for each character in input\n\t\tfor (int i = 0; i < input.length(); i++) {\n\t\t\tletters.put(input.charAt(i), true);\n\t\t}\n\n\t\t// iterate to check if every alphabet character is in the hashmap\n\t\tfor (int i = 0; i < alphabet.length(); i++) {\n\t\t\t// if an alphabet character is missing then set pangam to false\n\t\t\tif (letters.get(alphabet.charAt(i)) == null) {\n\t\t\t\tpangram = false;\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.print(\"Output : \");\n\t\tSystem.out.println(pangram ? \"Pangram Sentence\" : \"Not a pangram sentence\");\n\n\t\tsc.close();\n\t}\n}\n```\n\n```javascript\nfunction isPangram(input) {\n  const alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n  const letters = {};\n  let pangram = true;\n\n  // add an entry on \"letters\" object for every character in input\n  for (let i = 0; i < input.length; i++) {\n    // convert the read character to lowercase\n    char = input.charAt(i).toLowerCase();\n    letters[char] = true;\n  }\n\n  // iterate through the object for every letter in alphabet\n  alphabet.forEach((letter) => {\n    // if the letter is not inside of the \"letters\" object then set pangram to false\n    if (!letters[letter]) {\n      pangram = false;\n    }\n  });\n\n  return pangram;\n}\n\nconst input = \"a quick brown fox jumps over the lazy dog\";\nconsole.log(\"Input  :\", input);\nconsole.log(\n  \"Output :\",\n  isPangram(input) ? \"Pangram Sentence\" : \"Not a pangram sentence\"\n);\n```\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tfmt.Print(\"Input  : \")\n\t// Scanner can read line with space\n\tsc := bufio.NewScanner(os.Stdin)\n\n\tif sc.Scan() {\n\t\tstr := strings.ToLower(sc.Text())\n\n\t\tcharMap := make(map[string]struct{})\n\n\t\tfor i := 0; i < len(str); i++ {\n\t\t\t// 97 == 'a', 122 == 'z' (ascii code)\n\t\t\tif 97 <= str[i] && str[i] <= 122 {\n\t\t\t\tcharMap[string(str[i])] = struct{}{}\n\t\t\t}\n\t\t}\n\n\t\tif len(charMap) == 26 {\n\t\t\tfmt.Println(\"Output : Pangram Sentence\")\n\t\t} else {\n\t\t\tfmt.Println(\"Output : Not a Pangram Sentence\")\n\t\t}\n\t}\n}\n```\n\n```cs\nusing System;\nusing System.Collections.Generic;\n\npublic class PangramChecker\n{\n    public static void Main(string[] args)\n    {\n        Console.Write(\"Input  : \");\n        var str = Console.ReadLine();\n        if (str == null)\n        {\n            Console.WriteLine(\"Input Error\");\n            return;\n        }\n\n        var chars = str.ToCharArray();\n        var hs = new HashSet<char>();\n\n        for (int i = 0; i < chars.Length; i++)\n        {\n            int c = (int) chars[i];\n\n            // 97 == 'a', 122 == 'z' (ascii code)\n            if (97 <= c && c <= 122) hs.Add(chars[i]);\n        }\n\n        Console\n            .WriteLine(\"Output : {0}Pangram Sentence\",\n            hs.Count == 26 ? \"\" : \"Not a \");\n    }\n}\n```\n\n</CodeBlock>\n"}