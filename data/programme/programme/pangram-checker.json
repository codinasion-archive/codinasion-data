{"slug":"pangram-checker","title":"Pangram Checker","description":"Write a programme to check Pangram sentence","tags":["java","c","cpp","cs","go","js","py"],"contributors":["ssavi-ict","Regis-Caelum","julyvjo","umaxyon"],"latestUpdateDate":"2022-07-02T09:22:10Z","contentHtml":"<h2>Write a programme to check Pangram sentence</h2>\n<p>A pangram is a sentence containing every letter in the English alphabet.</p>\n<pre><code>Input  : The quick brown fox jumps over the lazy dog\nOutput : Pangram sentence\n</code></pre>\n<hr>\n<pre><code>// Write a programme to check Pangram sentence\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tfmt.Print(\"Input  : \")\n\tsc := bufio.NewScanner(os.Stdin) // Scanner can read line with space.\n\n\tif sc.Scan() {\n\t\tstr := strings.ToLower(sc.Text())\n\n\t\tcharMap := make(map[string]struct{})\n\n\t\tfor i := 0; i &#x3C; len(str); i++ {\n\t\t\tif 97 &#x3C;= str[i] &#x26;&#x26; str[i] &#x3C;= 122 { // 97 == 'a', 122 == 'z' (ascii code)\n\t\t\t\tcharMap[string(str[i])] = struct{}{}\n\t\t\t}\n\t\t}\n\n\t\tif len(charMap) == 26 {\n\t\t\tfmt.Println(\"Output : Pangram Sentence\")\n\t\t} else {\n\t\t\tfmt.Println(\"Output : Not a Pangram Sentence\")\n\t\t}\n\t}\n}\n\n</code></pre>\n<pre><code>// Write a programme to check Pangram sentence\n\nfunction isPangram(input) {\n  const alphabet = [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n  ];\n  const letters = {};\n  let pangram = true;\n\n  // add an entry on \"letters\" object for every character in input\n  for (let i = 0; i &#x3C; input.length; i++) {\n    // convert the read character to lowercase\n    char = input.charAt(i).toLowerCase();\n    letters[char] = true;\n  }\n\n  // iterate through the object for every letter in alphabet\n  alphabet.forEach((letter) => {\n    // if the letter is not inside of the \"letters\" object then set pangram to false\n    if (!letters[letter]) {\n      pangram = false;\n    }\n  });\n\n  return pangram;\n}\n\nconst input = \"a quick brown fox jumps over the lazy dog\";\nconsole.log(\"Input  :\", input);\nconsole.log(\n  \"Output :\",\n  isPangram(input) ? \"Pangram Sentence\" : \"Not a pangram sentence\"\n);\n\n</code></pre>\n<pre><code>// Write a programme to check Pangram sentence\n#include &#x3C;iostream>\n\nusing namespace std;\n\nint main()\n{\n    // Taking an array of character of max size 100\n    char str[100];\n\n    // Scanning the input line\n    cout &#x3C;&#x3C; \"Input  : \";\n    scanf(\"%[^\\n]s\", str);\n\n    // isPangram is a variable that store if a sentence is Pangram or not\n    char isPangram;\n\n    // As per description, we are checking if a-z is present or not\n    for (char i = 'a'; i &#x3C;= 'z'; i++)\n    {\n        // Iterating variable for given string\n        int j;\n\n        // Iterating through given string\n        for (j = 0; str[j] != '\\0'; j++)\n        {\n\n            // Checking the character in the given sentence in Uppercase (A-Z) or not\n            if (str[j] >= 'A' &#x26;&#x26; str[j] &#x3C;= 'Z')\n            {\n\n                // Change the character into Lowercase (a-z) if it is Uppercase (A-Z)\n                str[j] += 32;\n            }\n\n            // We found ith alphabet\n            if (str[j] == i)\n            {\n                // Breaking from the loop as we\n                break;\n            }\n            // do not have to check more after one alphabet at least once\n        }\n        // If we reach to the end of the string and still we do not locate an\n        if (str[j] == '\\0')\n        {\n            // alphabet in the string, then the sentence will not be a pangram\n            isPangram = 'n';\n\n            // As we are sure it is not a pangram sentence, then just getting out from the loop\n            break;\n        }\n    }\n\n    cout &#x3C;&#x3C; \"Output : \";\n    if (isPangram == 'n')\n    {\n        cout &#x3C;&#x3C; \"Not a pangram sentence\\n\";\n    }\n    else\n    {\n        cout &#x3C;&#x3C; \"Pangram Sentence\\n\";\n    }\n\n    return 0;\n}\n\n</code></pre>\n<pre><code>// Write a programme to check Pangram sentence\n\nimport java.util.HashMap;\nimport java.util.Scanner;\n\npublic class PangramChecker {\n\n  public static void main(String[] args) {\n    String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    HashMap&#x3C;Character, Boolean> letters = new HashMap&#x3C;Character, Boolean>();\n    boolean pangram = true;\n    Scanner sc = new Scanner(System.in);\n\n    // read input\n    System.out.print(\"Input  : \");\n    String input = sc.nextLine();\n\n    // convert string to lower case\n    input = input.toLowerCase();\n\n    // iterate for each character in input\n    for (int i = 0; i &#x3C; input.length(); i++) {\n      letters.put(input.charAt(i), true);\n    }\n\n    // iterate to check if every alphabet character is in the hashmap\n    for (int i = 0; i &#x3C; alphabet.length(); i++) {\n      // if an alphabet character is missing then set pangam to false\n      if (letters.get(alphabet.charAt(i)) == null) {\n        pangram = false;\n      }\n    }\n\n    System.out.print(\"Output : \");\n    System.out.println(pangram ? \"Pangram Sentence\" : \"Not a pangram sentence\");\n\n    sc.close();\n  }\n}\n\n</code></pre>\n<pre><code># Write a programme to check Pangram sentence\n\ninput_string = input('Input:  ')\n\ninput_string = str.lower(input_string)\n\nalphabets = set({})\n\nfor i in input_string:\n    if 'a' &#x3C;= i &#x3C;= 'z':\n        alphabets.add(i)\n\nif len(alphabets) == 26:\n    print('Output: Pangram Sentence')\nelse:\n    print('Output: Not a pangram sentence')\n\n</code></pre>\n<pre><code>// Write a programme to check Pangram sentence\nusing System;\nusing System.Collections.Generic;\n\npublic class PangramChecker\n{\n    public static void Main(string[] args)\n    {\n        Console.Write(\"Input  : \");\n        var str = Console.ReadLine();\n        if (str == null)\n        {\n            Console.WriteLine(\"Input Error\");\n            return;\n        }\n\n        var chars = str.ToCharArray();\n        var hs = new HashSet&#x3C;char>();\n\n        for (int i = 0; i &#x3C; chars.Length; i++)\n        {\n            int c = (int) chars[i];\n\n            // 97 == 'a', 122 == 'z' (ascii code)\n            if (97 &#x3C;= c &#x26;&#x26; c &#x3C;= 122) hs.Add(chars[i]);\n        }\n\n        Console\n            .WriteLine(\"Output : {0}Pangram Sentence\",\n            hs.Count == 26 ? \"\" : \"Not a \");\n    }\n}\n\n</code></pre>\n<pre><code>// Write a programme to check Pangram sentence\n#include &#x3C;stdio.h>\n\nint main()\n{\n    // Taking an array of character of max size 100\n    char str[100];\n\n    // Scanning the input line\n    printf(\"Input  : \");\n    scanf(\"%[^\\n]s\", str);\n\n    // isPangram is a variable that store if a sentence is Pangram or not\n    char isPangram;\n\n    // As per description, we are checking if a-z is present or not\n    for (char i = 'a'; i &#x3C;= 'z'; i++)\n    {\n        // Iterating variable for given string\n        int j;\n\n        // Iterating through given string\n        for (j = 0; str[j] != '\\0'; j++)\n        {\n            // Checking the character in the given sentence in Uppercase (A-Z) or not\n            if (str[j] >= 'A' &#x26;&#x26; str[j] &#x3C;= 'Z')\n            {\n                // Change the character into Lowercase (a-z) if it is Uppercase (A-Z)\n                str[j] += 32;\n            }\n            // We found ith alphabet\n            if (str[j] == i)\n            {\n                // Breaking from the loop as we\n                break;\n            }\n            // do not have to check more after one alphabet at least once\n        }\n        // If we reach to the end of the string and still we do not locate an\n        if (str[j] == '\\0')\n        {\n            // alphabet in the string, then the sentence will not be a pangram\n            isPangram = 'n';\n\n            // As we are sure it is not a pangram sentence, then just getting out from the loop\n            break;\n        }\n    }\n    printf(\"Output : \");\n    if (isPangram == 'n')\n    {\n        printf(\"Not a pangram sentence\\n\");\n    }\n    else\n    {\n        printf(\"Pangram Sentence\\n\");\n    }\n\n    return 0;\n}\n\n</code></pre>\n","markdown":"\n## Write a programme to check Pangram sentence\n\nA pangram is a sentence containing every letter in the English alphabet.\n\n```txt\nInput  : The quick brown fox jumps over the lazy dog\nOutput : Pangram sentence\n```\n\n---\n\n\n<CodeBlock>\n        \n```go\n// Write a programme to check Pangram sentence\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tfmt.Print(\"Input  : \")\n\tsc := bufio.NewScanner(os.Stdin) // Scanner can read line with space.\n\n\tif sc.Scan() {\n\t\tstr := strings.ToLower(sc.Text())\n\n\t\tcharMap := make(map[string]struct{})\n\n\t\tfor i := 0; i < len(str); i++ {\n\t\t\tif 97 <= str[i] && str[i] <= 122 { // 97 == 'a', 122 == 'z' (ascii code)\n\t\t\t\tcharMap[string(str[i])] = struct{}{}\n\t\t\t}\n\t\t}\n\n\t\tif len(charMap) == 26 {\n\t\t\tfmt.Println(\"Output : Pangram Sentence\")\n\t\t} else {\n\t\t\tfmt.Println(\"Output : Not a Pangram Sentence\")\n\t\t}\n\t}\n}\n\n```\n                \n```js\n// Write a programme to check Pangram sentence\n\nfunction isPangram(input) {\n  const alphabet = [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n  ];\n  const letters = {};\n  let pangram = true;\n\n  // add an entry on \"letters\" object for every character in input\n  for (let i = 0; i < input.length; i++) {\n    // convert the read character to lowercase\n    char = input.charAt(i).toLowerCase();\n    letters[char] = true;\n  }\n\n  // iterate through the object for every letter in alphabet\n  alphabet.forEach((letter) => {\n    // if the letter is not inside of the \"letters\" object then set pangram to false\n    if (!letters[letter]) {\n      pangram = false;\n    }\n  });\n\n  return pangram;\n}\n\nconst input = \"a quick brown fox jumps over the lazy dog\";\nconsole.log(\"Input  :\", input);\nconsole.log(\n  \"Output :\",\n  isPangram(input) ? \"Pangram Sentence\" : \"Not a pangram sentence\"\n);\n\n```\n                \n```cpp\n// Write a programme to check Pangram sentence\n#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    // Taking an array of character of max size 100\n    char str[100];\n\n    // Scanning the input line\n    cout << \"Input  : \";\n    scanf(\"%[^\\n]s\", str);\n\n    // isPangram is a variable that store if a sentence is Pangram or not\n    char isPangram;\n\n    // As per description, we are checking if a-z is present or not\n    for (char i = 'a'; i <= 'z'; i++)\n    {\n        // Iterating variable for given string\n        int j;\n\n        // Iterating through given string\n        for (j = 0; str[j] != '\\0'; j++)\n        {\n\n            // Checking the character in the given sentence in Uppercase (A-Z) or not\n            if (str[j] >= 'A' && str[j] <= 'Z')\n            {\n\n                // Change the character into Lowercase (a-z) if it is Uppercase (A-Z)\n                str[j] += 32;\n            }\n\n            // We found ith alphabet\n            if (str[j] == i)\n            {\n                // Breaking from the loop as we\n                break;\n            }\n            // do not have to check more after one alphabet at least once\n        }\n        // If we reach to the end of the string and still we do not locate an\n        if (str[j] == '\\0')\n        {\n            // alphabet in the string, then the sentence will not be a pangram\n            isPangram = 'n';\n\n            // As we are sure it is not a pangram sentence, then just getting out from the loop\n            break;\n        }\n    }\n\n    cout << \"Output : \";\n    if (isPangram == 'n')\n    {\n        cout << \"Not a pangram sentence\\n\";\n    }\n    else\n    {\n        cout << \"Pangram Sentence\\n\";\n    }\n\n    return 0;\n}\n\n```\n                \n```java\n// Write a programme to check Pangram sentence\n\nimport java.util.HashMap;\nimport java.util.Scanner;\n\npublic class PangramChecker {\n\n  public static void main(String[] args) {\n    String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    HashMap<Character, Boolean> letters = new HashMap<Character, Boolean>();\n    boolean pangram = true;\n    Scanner sc = new Scanner(System.in);\n\n    // read input\n    System.out.print(\"Input  : \");\n    String input = sc.nextLine();\n\n    // convert string to lower case\n    input = input.toLowerCase();\n\n    // iterate for each character in input\n    for (int i = 0; i < input.length(); i++) {\n      letters.put(input.charAt(i), true);\n    }\n\n    // iterate to check if every alphabet character is in the hashmap\n    for (int i = 0; i < alphabet.length(); i++) {\n      // if an alphabet character is missing then set pangam to false\n      if (letters.get(alphabet.charAt(i)) == null) {\n        pangram = false;\n      }\n    }\n\n    System.out.print(\"Output : \");\n    System.out.println(pangram ? \"Pangram Sentence\" : \"Not a pangram sentence\");\n\n    sc.close();\n  }\n}\n\n```\n                \n```python\n# Write a programme to check Pangram sentence\n\ninput_string = input('Input:  ')\n\ninput_string = str.lower(input_string)\n\nalphabets = set({})\n\nfor i in input_string:\n    if 'a' <= i <= 'z':\n        alphabets.add(i)\n\nif len(alphabets) == 26:\n    print('Output: Pangram Sentence')\nelse:\n    print('Output: Not a pangram sentence')\n\n```\n                \n```cs\n// Write a programme to check Pangram sentence\nusing System;\nusing System.Collections.Generic;\n\npublic class PangramChecker\n{\n    public static void Main(string[] args)\n    {\n        Console.Write(\"Input  : \");\n        var str = Console.ReadLine();\n        if (str == null)\n        {\n            Console.WriteLine(\"Input Error\");\n            return;\n        }\n\n        var chars = str.ToCharArray();\n        var hs = new HashSet<char>();\n\n        for (int i = 0; i < chars.Length; i++)\n        {\n            int c = (int) chars[i];\n\n            // 97 == 'a', 122 == 'z' (ascii code)\n            if (97 <= c && c <= 122) hs.Add(chars[i]);\n        }\n\n        Console\n            .WriteLine(\"Output : {0}Pangram Sentence\",\n            hs.Count == 26 ? \"\" : \"Not a \");\n    }\n}\n\n```\n                \n```c\n// Write a programme to check Pangram sentence\n#include <stdio.h>\n\nint main()\n{\n    // Taking an array of character of max size 100\n    char str[100];\n\n    // Scanning the input line\n    printf(\"Input  : \");\n    scanf(\"%[^\\n]s\", str);\n\n    // isPangram is a variable that store if a sentence is Pangram or not\n    char isPangram;\n\n    // As per description, we are checking if a-z is present or not\n    for (char i = 'a'; i <= 'z'; i++)\n    {\n        // Iterating variable for given string\n        int j;\n\n        // Iterating through given string\n        for (j = 0; str[j] != '\\0'; j++)\n        {\n            // Checking the character in the given sentence in Uppercase (A-Z) or not\n            if (str[j] >= 'A' && str[j] <= 'Z')\n            {\n                // Change the character into Lowercase (a-z) if it is Uppercase (A-Z)\n                str[j] += 32;\n            }\n            // We found ith alphabet\n            if (str[j] == i)\n            {\n                // Breaking from the loop as we\n                break;\n            }\n            // do not have to check more after one alphabet at least once\n        }\n        // If we reach to the end of the string and still we do not locate an\n        if (str[j] == '\\0')\n        {\n            // alphabet in the string, then the sentence will not be a pangram\n            isPangram = 'n';\n\n            // As we are sure it is not a pangram sentence, then just getting out from the loop\n            break;\n        }\n    }\n    printf(\"Output : \");\n    if (isPangram == 'n')\n    {\n        printf(\"Not a pangram sentence\\n\");\n    }\n    else\n    {\n        printf(\"Pangram Sentence\\n\");\n    }\n\n    return 0;\n}\n\n```\n                \n</CodeBlock>\n          \n        "}