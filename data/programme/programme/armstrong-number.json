{"slug":"armstrong-number","title":"Check armstrong number","description":"Write a programme to check armstrong number","tags":["cs","java","c","cpp","js","py","jl","go"],"contributors":["Badboy-16","kzhang01","vaishnavikumar8","Dentyr","rossilor95","ClasherKasten","SanjayShetty01"],"latestUpdateDate":"2022-07-31T07:51:41Z","contentHtml":"<h2>Write a programme to check armstrong number</h2>\n<p>Armstrong number is a number that is equal to the sum of cubes of length of its digits.</p>\n<h3>Examples</h3>\n<ul>\n<li>0 = 0^1</li>\n<li>1 = 1^1</li>\n<li>153 = 1^3 + 5^3 + 3^3</li>\n<li>370 = 3^3 + 7^3 + 0^3</li>\n<li>9474 = 9^4 + 4^4 + 7^4 + 4^4</li>\n</ul>\n<h3>Programme</h3>\n<pre><code>Input:  153\nOutput: armstrong number\n</code></pre>\n<pre><code>Input:  121\nOutput: not a armstrong number\n</code></pre>\n<hr>\n<pre><code>// Write a programme to check armstrong number\npackage main\n\nimport \"fmt\"\n\nfunc countDigits(number int) int {\n\tvar numberOfDigits int = 0\n\tfor number > 0 {\n\t\tnumber /= 10\n\t\tnumberOfDigits++\n\t}\n\treturn numberOfDigits\n}\n\n// math.Pow only accepts float64 inputs and returns a float64 number\n// Therefore, we write our own Integer Power function\nfunc intPow(base, exponent int) int {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tvar result int = base\n\tfor i := 2; i &#x3C;= exponent; i++ {\n\t\tresult *= base\n\t}\n\treturn result\n}\n\nfunc requiredSum(number int) int {\n\tvar numberOfDigits int = countDigits(number)\n\tvar sum int = 0\n\tfor number > 0 {\n\t\tvar digit int = number % 10\n\t\tnumber /= 10\n\t\tsum += intPow(digit, numberOfDigits)\n\t}\n\treturn sum\n}\n\nfunc isArmstrong(number int) bool {\n\treturn number == requiredSum(number)\n}\n\nfunc main() {\n\tvar num int\n\tfmt.Print(\"Enter an integer: \")\n\tfmt.Scan(&#x26;num)\n\tfmt.Println(\"\\nInput  :\", num)\n\tif isArmstrong(num) {\n\t\tfmt.Println(\"Output : armstrong number\")\n\t} else {\n\t\tfmt.Println(\"Output : not an armstrong number\")\n\t}\n}\n\n</code></pre>\n<pre><code>// Write a programme to check armstrong number\nimport java.util.Scanner;\n\npublic class ArmstrongNumber {\n\n  private static String isArmstrong(int num, int length) {\n    int sum = 0;\n    for (int currNum = num; currNum != 0; currNum /= 10) {\n      sum += Math.pow(currNum % 10, length);\n    }\n    return sum == num ? \"armstrong number\" : \"not armstrong number\";\n  }\n\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    System.out.print(\"Enter an integer : \");\n    int num = sc.nextInt();\n    int length = String.valueOf(num).length();\n    System.out.println(\"\\nOutput : \" + isArmstrong(num, length));\n    sc.close();\n  }\n}\n\n</code></pre>\n<pre><code># Write a programme to check armstrong number\n\nprint(\"Input  : \")\nnum = parse(Int32, readline())\n\nexponent = length(string(num))\ntemp = num\nval = 0\n\nwhile temp > 0\n    number = temp % 10\n    global val += number^exponent\n    global temp = fld(temp, 10)\nend\n\nprintln(\"Output : \", num == val ? \"Armstrong number\" : \"Not an armstrong number\")\n\n</code></pre>\n<pre><code>// Write a programme to check armstrong number\n#include &#x3C;stdio.h>\n#include &#x3C;stdlib.h> /* for atoi function */\n#include &#x3C;ctype.h>  /* for isdigit and isspace functions */\n#include &#x3C;string.h>\n#include &#x3C;math.h>\n\n#define LIMIT 32\n\nint isarmstrong(int, int);\nint validinput(char[]);\n\nint main()\n{\n  char numstr[LIMIT];\n  int num;\n\n  printf(\"Input  : \");\n  for (;;)\n  {\n    scanf(\"%s\", numstr);\n    if (validinput(numstr))\n      break;\n    else\n      printf(\"\\nInvalid input.\\nInput:  \");\n  }\n  int len = strlen(numstr);\n  num = atoi(numstr);\n  if (isarmstrong(num, len))\n    printf(\"Output : armstrong number\\n\");\n  else\n    printf(\"Output : not a armstrong number\\n\");\n  return 0;\n}\n\nint isarmstrong(int i, int len)\n/* check if int is armstrong number */\n{\n  int num = i;\n  int sum;\n  for (sum = 0; num != 0; num /= 10)\n    sum += pow(num % 10, len);\n  return (sum == i) ? 1 : 0;\n}\n\nint validinput(char a[])\n/* check if char array can be converted to non-negative int */\n{\n  int i = 0;\n  while (isspace(a[i]))\n    i++;\n  if (!isdigit(a[i]))\n    return 0;\n  while (isdigit(a[i]))\n    i++;\n  if (a[i] != '\\0' &#x26;&#x26; !isspace(a[i]))\n    return 0;\n  else if (a[i] == '\\0')\n    return 1;\n  while (isspace(a[i]))\n    i++;\n  return (a[i] == '\\0') ? 1 : 0;\n}\n\n</code></pre>\n<pre><code>// Write a programme to check armstrong number\n#include &#x3C;iostream>\n#include &#x3C;cmath>\n\nbool isArmstrongNumber(int n)\n{\n    int cache = n;\n    int length = log10(n) + 1;\n    int asum = 0;\n    for (int i = 0; i &#x3C; length; i++)\n    {\n        asum += pow(n % 10, length);\n        n = n / 10;\n    }\n    return cache == asum;\n}\n\nint main(void)\n{\n    int n;\n    std::cout &#x3C;&#x3C; \"Input  : \";\n    std::cin >> n;\n    if (isArmstrongNumber(n))\n    {\n        std::cout &#x3C;&#x3C; \"Output : Amstrong number\" &#x3C;&#x3C; std::endl;\n    }\n    else\n    {\n        std::cout &#x3C;&#x3C; \"Output : Not a armstrong number\" &#x3C;&#x3C; std::endl;\n    }\n    return 0;\n}\n\n</code></pre>\n<pre><code>// Write a programme to check armstrong number\nusing System;\n\npublic class ArmstrongNumber\n{\n    public static bool IsArmstrongNumber(int num)\n    {\n        int sum = 0;\n        for (int temp = num; temp > 0; temp /= 10)\n        {\n            sum += ((int) Math.Pow(temp % 10, numDigits(num)));\n        }\n        if (num == sum) return true;\n        return false;\n    }\n\n    public static int numDigits(int num)\n    {\n        if (num == 0) return 1;\n        return ((int) Math.Floor(Math.Log10(num))) + 1;\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.Write(\"Input  : \");\n        Console\n            .WriteLine(IsArmstrongNumber(int.Parse(Console.ReadLine()))\n                ? \"Output : Is an Armstrong number\"\n                : \"Output : Not an Armstrong number\");\n    }\n}\n\n</code></pre>\n<pre><code># Write a programme to check if the number is an Armstrong number or not\n\n# Get input\nnum = input(\"Input  : \")\n\nlength = len(num)\nnumber = int(num)\n\nsum = 0\n\ntemp = number\nwhile temp > 0:\n    digit = temp % 10\n    sum += digit ** length\n    temp //= 10\n\n# Display the output\noutput = \"armstrong number\" if number == sum else \"not a armstrong number\"\nprint(\"Output :\", output)\n\n</code></pre>\n<pre><code>// Write a programme to check armstrong number\n\nconst countDigits = function (number) {\n  let numberOfDigits = 0;\n  while (number > 0) {\n    number = Math.floor(number / 10);\n    numberOfDigits++;\n  }\n  return numberOfDigits;\n};\n\nconst requiredSum = function (number) {\n  const numberOfDigits = countDigits(number);\n  let sum = 0;\n  while (number > 0) {\n    digit = number % 10;\n    number = Math.floor(number / 10);\n    sum += Math.pow(digit, numberOfDigits);\n  }\n  return sum;\n};\n\nconst isArmstrong = function (number) {\n  const sum = requiredSum(number);\n  return number === sum;\n};\n\nconst readline = require(\"readline\");\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nrl.question(\"Enter an integer : \", (userInput) => {\n  console.log(`\\nInput  : ${userInput}`);\n  const num = Number.parseInt(userInput);\n  if (!isNaN(num)) {\n    answer = isArmstrong(num)\n      ? \"Output : armstrong number\"\n      : \"Output : not an armstrong number\";\n    console.log(answer);\n    rl.close();\n  } else {\n    console.log(\"Invalid input: the input is not a number.\");\n    rl.close();\n  }\n});\n\n</code></pre>\n","markdown":"\n## Write a programme to check armstrong number\n\nArmstrong number is a number that is equal to the sum of cubes of length of its digits.\n\n### Examples\n\n- 0 = 0^1\n- 1 = 1^1\n- 153 = 1^3 + 5^3 + 3^3\n- 370 = 3^3 + 7^3 + 0^3\n- 9474 = 9^4 + 4^4 + 7^4 + 4^4\n\n### Programme\n\n```txt\nInput:  153\nOutput: armstrong number\n```\n\n```txt\nInput:  121\nOutput: not a armstrong number\n```\n\n---\n\n\n<CodeBlock>\n        \n```go\n// Write a programme to check armstrong number\npackage main\n\nimport \"fmt\"\n\nfunc countDigits(number int) int {\n\tvar numberOfDigits int = 0\n\tfor number > 0 {\n\t\tnumber /= 10\n\t\tnumberOfDigits++\n\t}\n\treturn numberOfDigits\n}\n\n// math.Pow only accepts float64 inputs and returns a float64 number\n// Therefore, we write our own Integer Power function\nfunc intPow(base, exponent int) int {\n\tif exponent == 0 {\n\t\treturn 1\n\t}\n\tvar result int = base\n\tfor i := 2; i <= exponent; i++ {\n\t\tresult *= base\n\t}\n\treturn result\n}\n\nfunc requiredSum(number int) int {\n\tvar numberOfDigits int = countDigits(number)\n\tvar sum int = 0\n\tfor number > 0 {\n\t\tvar digit int = number % 10\n\t\tnumber /= 10\n\t\tsum += intPow(digit, numberOfDigits)\n\t}\n\treturn sum\n}\n\nfunc isArmstrong(number int) bool {\n\treturn number == requiredSum(number)\n}\n\nfunc main() {\n\tvar num int\n\tfmt.Print(\"Enter an integer: \")\n\tfmt.Scan(&num)\n\tfmt.Println(\"\\nInput  :\", num)\n\tif isArmstrong(num) {\n\t\tfmt.Println(\"Output : armstrong number\")\n\t} else {\n\t\tfmt.Println(\"Output : not an armstrong number\")\n\t}\n}\n\n```\n                \n```java\n// Write a programme to check armstrong number\nimport java.util.Scanner;\n\npublic class ArmstrongNumber {\n\n  private static String isArmstrong(int num, int length) {\n    int sum = 0;\n    for (int currNum = num; currNum != 0; currNum /= 10) {\n      sum += Math.pow(currNum % 10, length);\n    }\n    return sum == num ? \"armstrong number\" : \"not armstrong number\";\n  }\n\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    System.out.print(\"Enter an integer : \");\n    int num = sc.nextInt();\n    int length = String.valueOf(num).length();\n    System.out.println(\"\\nOutput : \" + isArmstrong(num, length));\n    sc.close();\n  }\n}\n\n```\n                \n```julia\n# Write a programme to check armstrong number\n\nprint(\"Input  : \")\nnum = parse(Int32, readline())\n\nexponent = length(string(num))\ntemp = num\nval = 0\n\nwhile temp > 0\n    number = temp % 10\n    global val += number^exponent\n    global temp = fld(temp, 10)\nend\n\nprintln(\"Output : \", num == val ? \"Armstrong number\" : \"Not an armstrong number\")\n\n```\n                \n```c\n// Write a programme to check armstrong number\n#include <stdio.h>\n#include <stdlib.h> /* for atoi function */\n#include <ctype.h>  /* for isdigit and isspace functions */\n#include <string.h>\n#include <math.h>\n\n#define LIMIT 32\n\nint isarmstrong(int, int);\nint validinput(char[]);\n\nint main()\n{\n  char numstr[LIMIT];\n  int num;\n\n  printf(\"Input  : \");\n  for (;;)\n  {\n    scanf(\"%s\", numstr);\n    if (validinput(numstr))\n      break;\n    else\n      printf(\"\\nInvalid input.\\nInput:  \");\n  }\n  int len = strlen(numstr);\n  num = atoi(numstr);\n  if (isarmstrong(num, len))\n    printf(\"Output : armstrong number\\n\");\n  else\n    printf(\"Output : not a armstrong number\\n\");\n  return 0;\n}\n\nint isarmstrong(int i, int len)\n/* check if int is armstrong number */\n{\n  int num = i;\n  int sum;\n  for (sum = 0; num != 0; num /= 10)\n    sum += pow(num % 10, len);\n  return (sum == i) ? 1 : 0;\n}\n\nint validinput(char a[])\n/* check if char array can be converted to non-negative int */\n{\n  int i = 0;\n  while (isspace(a[i]))\n    i++;\n  if (!isdigit(a[i]))\n    return 0;\n  while (isdigit(a[i]))\n    i++;\n  if (a[i] != '\\0' && !isspace(a[i]))\n    return 0;\n  else if (a[i] == '\\0')\n    return 1;\n  while (isspace(a[i]))\n    i++;\n  return (a[i] == '\\0') ? 1 : 0;\n}\n\n```\n                \n```cpp\n// Write a programme to check armstrong number\n#include <iostream>\n#include <cmath>\n\nbool isArmstrongNumber(int n)\n{\n    int cache = n;\n    int length = log10(n) + 1;\n    int asum = 0;\n    for (int i = 0; i < length; i++)\n    {\n        asum += pow(n % 10, length);\n        n = n / 10;\n    }\n    return cache == asum;\n}\n\nint main(void)\n{\n    int n;\n    std::cout << \"Input  : \";\n    std::cin >> n;\n    if (isArmstrongNumber(n))\n    {\n        std::cout << \"Output : Amstrong number\" << std::endl;\n    }\n    else\n    {\n        std::cout << \"Output : Not a armstrong number\" << std::endl;\n    }\n    return 0;\n}\n\n```\n                \n```cs\n// Write a programme to check armstrong number\nusing System;\n\npublic class ArmstrongNumber\n{\n    public static bool IsArmstrongNumber(int num)\n    {\n        int sum = 0;\n        for (int temp = num; temp > 0; temp /= 10)\n        {\n            sum += ((int) Math.Pow(temp % 10, numDigits(num)));\n        }\n        if (num == sum) return true;\n        return false;\n    }\n\n    public static int numDigits(int num)\n    {\n        if (num == 0) return 1;\n        return ((int) Math.Floor(Math.Log10(num))) + 1;\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.Write(\"Input  : \");\n        Console\n            .WriteLine(IsArmstrongNumber(int.Parse(Console.ReadLine()))\n                ? \"Output : Is an Armstrong number\"\n                : \"Output : Not an Armstrong number\");\n    }\n}\n\n```\n                \n```python\n# Write a programme to check if the number is an Armstrong number or not\n\n# Get input\nnum = input(\"Input  : \")\n\nlength = len(num)\nnumber = int(num)\n\nsum = 0\n\ntemp = number\nwhile temp > 0:\n    digit = temp % 10\n    sum += digit ** length\n    temp //= 10\n\n# Display the output\noutput = \"armstrong number\" if number == sum else \"not a armstrong number\"\nprint(\"Output :\", output)\n\n```\n                \n```js\n// Write a programme to check armstrong number\n\nconst countDigits = function (number) {\n  let numberOfDigits = 0;\n  while (number > 0) {\n    number = Math.floor(number / 10);\n    numberOfDigits++;\n  }\n  return numberOfDigits;\n};\n\nconst requiredSum = function (number) {\n  const numberOfDigits = countDigits(number);\n  let sum = 0;\n  while (number > 0) {\n    digit = number % 10;\n    number = Math.floor(number / 10);\n    sum += Math.pow(digit, numberOfDigits);\n  }\n  return sum;\n};\n\nconst isArmstrong = function (number) {\n  const sum = requiredSum(number);\n  return number === sum;\n};\n\nconst readline = require(\"readline\");\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nrl.question(\"Enter an integer : \", (userInput) => {\n  console.log(`\\nInput  : ${userInput}`);\n  const num = Number.parseInt(userInput);\n  if (!isNaN(num)) {\n    answer = isArmstrong(num)\n      ? \"Output : armstrong number\"\n      : \"Output : not an armstrong number\";\n    console.log(answer);\n    rl.close();\n  } else {\n    console.log(\"Invalid input: the input is not a number.\");\n    rl.close();\n  }\n});\n\n```\n                \n</CodeBlock>\n          \n        "}