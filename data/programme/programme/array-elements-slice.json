{"contentHtml":"<h2>Write a programme to generate new array with sliced elements of old array</h2>\n<pre><code>Array : ['abcd', 'efgh', 'ijklmn', 'opq', 'rstuvw', 'xyz']\nStart : 2\nEnd   : 3\n\nSliced Array : ['bc', 'fg', 'jk', 'pq', 'st', 'yz']\n</code></pre>\n<hr>\n<pre><code>// define array\narray_list = [\"abcd\", \"efgh\", \"ijklmn\", \"opq\", \"rstuvw\", \"xyz\"];\nconsole.log(\"Array :\", array_list);\n\n// function arguments (arrayList) (start slice from -number) (end slice with -number)\nfunction arrayLetterRange(a_list, start = 0, end = 2) {\n  // store slice value in result\n  let result = [];\n  for (let i = 0; i &#x3C; a_list.length; i++) {\n    const element = a_list[i];\n    let sliced_val = element.slice(start - 1, end);\n\n    // check slice value if not empty\n    if (sliced_val != \"\") {\n      result.push(sliced_val);\n    }\n  }\n  return result;\n}\n\n// define range\nlet start = 2;\nlet end = 3;\nconsole.log(\"Start :\", start);\nconsole.log(\"End   :\", end);\n\n// call the function\nlet array_result = arrayLetterRange(array_list, start, end);\n\nconsole.log(\"\\nSliced Array :\", array_result);\n</code></pre>\n<pre><code>&#x3C;?php\n// define array\n$array_list = ['abcd', 'efgh', 'ijklmn', 'opq', 'rstuvw', 'xyz'];\nprint 'Array : ' . json_encode($array_list);\n\n# function arguments (arrayList) (start slice from -number) (end slice with -number)\nfunction arrayLetterRange($a_list, $start = 1, $end = 2)\n{\n    // store slice value in result\n    $result = [];\n    for ($i = 0; $i &#x3C; sizeof($a_list); $i++) {\n        $sliced_val = substr($a_list[$i], $start - 1, $end);\n\n        // check slice value if not empty\n        if ($sliced_val != '') {\n            array_push($result, $sliced_val);\n        }\n    }\n    return $result;\n}\n\n// define range\n$start = 2;\n$end = 3;\nprint \"\\nStart : $start\";\nprint \"\\nEnd   : $end\";\n\n// call the function\n$array_result = arrayLetterRange($array_list, $start, $end);\nprint \"\\n\\nSliced Array : \" . json_encode($array_result);\nprint \"\\n\";\n?>\n</code></pre>\n<pre><code># define array\narray_list = ['abcd', 'efgh', 'ijklmn', 'opq', 'rstuvw', 'xyz']\nprint(\"Array :\", array_list)\n\n# function arguments (arrayList) (start slice from -number) (end slice with -number)\ndef arrayLetterRange(a_list, start=5, end=1):\n\n    # store slice value in result\n    result = []\n    for i in a_list:\n        sliced_val = i[start-1: end]\n\n        # check slice value if not empty\n        if i != '':\n            result.append(sliced_val)\n\n    return result\n\n# define range\nrange_start = 2\nrange_end = 3\nprint(\"Start :\", range_start)\nprint(\"End   :\", range_end)\nprint()\n\n# call the function\narray_result = arrayLetterRange(array_list, range_start, range_end)\nprint(\"Sliced Array :\", array_result)\n</code></pre>\n","markdown":"\n## Write a programme to generate new array with sliced elements of old array\n\n```txt\nArray : ['abcd', 'efgh', 'ijklmn', 'opq', 'rstuvw', 'xyz']\nStart : 2\nEnd   : 3\n\nSliced Array : ['bc', 'fg', 'jk', 'pq', 'st', 'yz']\n```\n\n---\n\n<CodeBlock>\n\n```javascript\n// define array\narray_list = [\"abcd\", \"efgh\", \"ijklmn\", \"opq\", \"rstuvw\", \"xyz\"];\nconsole.log(\"Array :\", array_list);\n\n// function arguments (arrayList) (start slice from -number) (end slice with -number)\nfunction arrayLetterRange(a_list, start = 0, end = 2) {\n  // store slice value in result\n  let result = [];\n  for (let i = 0; i < a_list.length; i++) {\n    const element = a_list[i];\n    let sliced_val = element.slice(start - 1, end);\n\n    // check slice value if not empty\n    if (sliced_val != \"\") {\n      result.push(sliced_val);\n    }\n  }\n  return result;\n}\n\n// define range\nlet start = 2;\nlet end = 3;\nconsole.log(\"Start :\", start);\nconsole.log(\"End   :\", end);\n\n// call the function\nlet array_result = arrayLetterRange(array_list, start, end);\n\nconsole.log(\"\\nSliced Array :\", array_result);\n```\n\n```php\n<?php\n// define array\n$array_list = ['abcd', 'efgh', 'ijklmn', 'opq', 'rstuvw', 'xyz'];\nprint 'Array : ' . json_encode($array_list);\n\n# function arguments (arrayList) (start slice from -number) (end slice with -number)\nfunction arrayLetterRange($a_list, $start = 1, $end = 2)\n{\n    // store slice value in result\n    $result = [];\n    for ($i = 0; $i < sizeof($a_list); $i++) {\n        $sliced_val = substr($a_list[$i], $start - 1, $end);\n\n        // check slice value if not empty\n        if ($sliced_val != '') {\n            array_push($result, $sliced_val);\n        }\n    }\n    return $result;\n}\n\n// define range\n$start = 2;\n$end = 3;\nprint \"\\nStart : $start\";\nprint \"\\nEnd   : $end\";\n\n// call the function\n$array_result = arrayLetterRange($array_list, $start, $end);\nprint \"\\n\\nSliced Array : \" . json_encode($array_result);\nprint \"\\n\";\n?>\n```\n\n```python\n# define array\narray_list = ['abcd', 'efgh', 'ijklmn', 'opq', 'rstuvw', 'xyz']\nprint(\"Array :\", array_list)\n\n# function arguments (arrayList) (start slice from -number) (end slice with -number)\ndef arrayLetterRange(a_list, start=5, end=1):\n\n    # store slice value in result\n    result = []\n    for i in a_list:\n        sliced_val = i[start-1: end]\n\n        # check slice value if not empty\n        if i != '':\n            result.append(sliced_val)\n\n    return result\n\n# define range\nrange_start = 2\nrange_end = 3\nprint(\"Start :\", range_start)\nprint(\"End   :\", range_end)\nprint()\n\n# call the function\narray_result = arrayLetterRange(array_list, range_start, range_end)\nprint(\"Sliced Array :\", array_result)\n```\n\n</CodeBlock>\n","frontMatter":{"slug":"array-elements-slice","title":"Slice array element","description":"Write a programme to generate new array with sliced elements of old array","image":"https://raw.githubusercontent.com/codinasion/codinasion-programme/master/programme/array-elements-slice/hero.png","tags":["js","php","python"],"contributors":["0ME9A"]}}