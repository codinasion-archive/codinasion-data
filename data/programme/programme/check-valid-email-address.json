{"slug":"check-valid-email-address","title":"Check valid email address","description":"Write a programme to check a valid email address","tags":["java","kt","py","cs","js"],"contributors":["anastazir","fadyfayek11","pabon-alberto","rossilor95"],"latestUpdateDate":"2022-07-29T12:22:31Z","contentHtml":"<h2>Write a programme to check a valid email address</h2>\n<p>Acceptable email prefix formats</p>\n<ul>\n<li>Allowed characters: letters (a-z), numbers, underscores, periods, and dashes.</li>\n<li>An underscore, period, or dash must be followed by one or more letter or number.</li>\n</ul>\n<pre><code>Input  : abc-d@mail.com\nOutput : valid\n</code></pre>\n<hr>\n<pre><code>// Write a programme to check a valid email address\nimport java.util.Scanner;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass CheckValidEmailAddress {\n\n  public static boolean isValidEmail(String emailAddress) {\n    Pattern pattern = Pattern.compile(\n      \"^[A-Z](?:[A-Z\\\\d]|[-_.](?=[A-Z\\\\d]))+@[-A-Z\\\\d.]+\\\\.[A-Z]{2,}$\",\n      Pattern.CASE_INSENSITIVE\n    );\n    Matcher matcher = pattern.matcher(emailAddress);\n    return matcher.find();\n  }\n\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n\n    System.out.print(\"Please, insert the email address to validate : \");\n    String emailAddress = scanner.nextLine();\n\n    if (isValidEmail(emailAddress)) {\n      System.out.println(\"The email address provided is 'valid'.\");\n    } else {\n      System.out.println(\"\\nThe email address provided is 'invalid' !!!\");\n    }\n\n    scanner.close();\n  }\n}\n\n</code></pre>\n<pre><code>// Write a programme to check a valid email address\nimport kotlin.text.Regex\n\nfun isValidEmail(emailAddress: String): Boolean {\n    val pattern =\n        Regex(\"^[A-Z](?:[A-Z\\\\d]|[-_.](?=[A-Z\\\\d]))+@[-A-Z\\\\d.]+\\\\.[A-Z]{2,}$\", RegexOption.IGNORE_CASE)\n    return pattern.matches(emailAddress)\n}\n\nfun main() {\n    print(\"Please, insert the email address to validate : \")\n    val emailAddress = readln()\n    if (isValidEmail(emailAddress)) {\n        println(\"\\nThe email address provided is valid.\")\n    } else {\n        println(\"\\nThe email address provided is invalid.\")\n    }\n}\n\n</code></pre>\n<pre><code>// Write a programme to check a valid email address\nusing System;\nusing System.Text.RegularExpressions;\n\npublic class EmailValidator\n{\n    public static bool IsValid(string email)\n    {\n        string regex =\n            @\"^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([azA-Z]{2,4}|[0-9]{1,3})(\\]?)$\";\n\n        return Regex.IsMatch(email, regex, RegexOptions.IgnoreCase);\n    }\n\n    public static void Main()\n    {\n        string email = \"abc@mail.com\";\n        Console.WriteLine(\"Input  : {0}\", email);\n\n        Console.WriteLine(\"Output : {0}\", IsValid(email) ? \"Valid\" : \"Invalid\");\n    }\n}\n\n</code></pre>\n<pre><code># Write a programme to check a valid email address\nimport re\n\ndef solve(s):\n    # pattern (starting with [a-zA-Z0-9-_] then @ then email domain)\n    p = \"^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-z]{1,3}$\" \n    if re.match(p,s):\n        return True\n    else:\n        for i in range(len(s)):\n            if s[i] == '-':\n                if s[i+1].isalpha() == False:\n                    return False\n            if s[i] == '.':\n                if i != 0:\n                    if s[i+1].isalpha() == True:\n                        continue\n                    return False\n                return False\n            if s[i] == '#':\n                return False\n        return True\n\ns = input('Email : ')\nprint('Valid :', solve(s))\n\n</code></pre>\n<pre><code>// Write a programme to check a valid email address\n\nfunction isValidEmail(email) {\n  const re = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  if (email.match(re)) {\n    return true;\n  }\n  return false;\n}\n\nconst email = \"test@gmail.com\";\n\nconsole.log(\"Input  :\", email);\nconsole.log(\"Output :\", isValidEmail(email) ? \"valid\" : \"invalid\");\n\n</code></pre>\n","markdown":"\n## Write a programme to check a valid email address\n\nAcceptable email prefix formats\n\n- Allowed characters: letters (a-z), numbers, underscores, periods, and dashes.\n- An underscore, period, or dash must be followed by one or more letter or number.\n\n```txt\nInput  : abc-d@mail.com\nOutput : valid\n```\n\n---\n\n\n<CodeBlock>\n        \n```java\n// Write a programme to check a valid email address\nimport java.util.Scanner;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass CheckValidEmailAddress {\n\n  public static boolean isValidEmail(String emailAddress) {\n    Pattern pattern = Pattern.compile(\n      \"^[A-Z](?:[A-Z\\\\d]|[-_.](?=[A-Z\\\\d]))+@[-A-Z\\\\d.]+\\\\.[A-Z]{2,}$\",\n      Pattern.CASE_INSENSITIVE\n    );\n    Matcher matcher = pattern.matcher(emailAddress);\n    return matcher.find();\n  }\n\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n\n    System.out.print(\"Please, insert the email address to validate : \");\n    String emailAddress = scanner.nextLine();\n\n    if (isValidEmail(emailAddress)) {\n      System.out.println(\"The email address provided is 'valid'.\");\n    } else {\n      System.out.println(\"\\nThe email address provided is 'invalid' !!!\");\n    }\n\n    scanner.close();\n  }\n}\n\n```\n                \n```kt\n// Write a programme to check a valid email address\nimport kotlin.text.Regex\n\nfun isValidEmail(emailAddress: String): Boolean {\n    val pattern =\n        Regex(\"^[A-Z](?:[A-Z\\\\d]|[-_.](?=[A-Z\\\\d]))+@[-A-Z\\\\d.]+\\\\.[A-Z]{2,}$\", RegexOption.IGNORE_CASE)\n    return pattern.matches(emailAddress)\n}\n\nfun main() {\n    print(\"Please, insert the email address to validate : \")\n    val emailAddress = readln()\n    if (isValidEmail(emailAddress)) {\n        println(\"\\nThe email address provided is valid.\")\n    } else {\n        println(\"\\nThe email address provided is invalid.\")\n    }\n}\n\n```\n                \n```cs\n// Write a programme to check a valid email address\nusing System;\nusing System.Text.RegularExpressions;\n\npublic class EmailValidator\n{\n    public static bool IsValid(string email)\n    {\n        string regex =\n            @\"^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([azA-Z]{2,4}|[0-9]{1,3})(\\]?)$\";\n\n        return Regex.IsMatch(email, regex, RegexOptions.IgnoreCase);\n    }\n\n    public static void Main()\n    {\n        string email = \"abc@mail.com\";\n        Console.WriteLine(\"Input  : {0}\", email);\n\n        Console.WriteLine(\"Output : {0}\", IsValid(email) ? \"Valid\" : \"Invalid\");\n    }\n}\n\n```\n                \n```python\n# Write a programme to check a valid email address\nimport re\n\ndef solve(s):\n    # pattern (starting with [a-zA-Z0-9-_] then @ then email domain)\n    p = \"^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-z]{1,3}$\" \n    if re.match(p,s):\n        return True\n    else:\n        for i in range(len(s)):\n            if s[i] == '-':\n                if s[i+1].isalpha() == False:\n                    return False\n            if s[i] == '.':\n                if i != 0:\n                    if s[i+1].isalpha() == True:\n                        continue\n                    return False\n                return False\n            if s[i] == '#':\n                return False\n        return True\n\ns = input('Email : ')\nprint('Valid :', solve(s))\n\n```\n                \n```js\n// Write a programme to check a valid email address\n\nfunction isValidEmail(email) {\n  const re = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  if (email.match(re)) {\n    return true;\n  }\n  return false;\n}\n\nconst email = \"test@gmail.com\";\n\nconsole.log(\"Input  :\", email);\nconsole.log(\"Output :\", isValidEmail(email) ? \"valid\" : \"invalid\");\n\n```\n                \n</CodeBlock>\n          \n        "}