{"slug":"fibonnaci-series-using-recursion","title":"Fibonacci Series using recursion","description":"Write a program to print the Fibonacci series for 'n' numbers using recursion","tags":["java","cpp","js","c","cs","go","py"],"contributors":["harshi1122","Shivam-Shrivastav","Prabs09","rgodoy86","rutterjt","umaxyon"],"latestUpdateDate":"2022-07-02T09:22:10Z","contentHtml":"<h2>Write a program to print the Fibonacci series for 'n' numbers</h2>\n<pre><code>Input  : 10\nOutput : 0 1 1 2 3 5 8 13 21 34\n</code></pre>\n<hr>\n<pre><code>// Write a program to print fibonacci series using recursion\nusing System;\n\npublic class FibonaciRecursion\n{\n    public static void Main(string[] args)\n    {\n        Console.Write(\"Input  : \");\n        int num;\n        if (int.TryParse(Console.ReadLine(), out num))\n        {\n            Console.Write(\"\\nOutput : \");\n            for (int i = 0; i &#x3C; num; i++)\n            {\n                Console.Write(\"{0} \", Fibonaci(i));\n            }\n            Console.WriteLine();\n        }\n        else\n        {\n            Console.WriteLine(\"Input Err\");\n        }\n    }\n\n    public static int Fibonaci(int n)\n    {\n        if (n == 0 || n == 1) return n;\n\n        return Fibonaci(n - 1) + Fibonaci(n - 2);\n    }\n}\n\n</code></pre>\n<pre><code>/*\nWrite a program to print Fibonacci series using recursion.\n\nExample:\nInput: n = 10.\nOutput: 0 1 1 2 3 5 8 13 21 34\n*/\n\nconst fib = (n) => {\n  if (n === 0) return 0;\n  if (n &#x3C;= 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n};\n\nconst printFibs = (n) => {\n  let str = \"\";\n  for (let i = 0; i &#x3C; n; i++) {\n    str += `${fib(i)} `;\n  }\n  console.log(str);\n};\n\nprintFibs(10);\n\n</code></pre>\n<pre><code>// Write a program to print the Fibonacci series for 'n' numbers\nimport java.util.Scanner;\n\nclass FibonacciRecursion {\n\n  public static void main(String args[]) {\n    Scanner sc = new Scanner(System.in);\n    System.out.print(\"Enter a number : \");\n    int num = sc.nextInt();\n\n    System.out.print(\"Fibonacci Series :\");\n    for (int i = 0; i &#x3C;= num; i++) {\n      System.out.print(\" \" + fibo(i));\n    }\n    System.out.println();\n\n    sc.close();\n  }\n\n  static int fibo(int num) {\n    if (num &#x3C; 2) {\n      return num;\n    }\n    return fibo(num - 1) + fibo(num - 2);\n  }\n}\n\n</code></pre>\n<pre><code>// Write a program to print fibonacci series using recursion\n#include &#x3C;stdio.h>\n\nint fibonacci(int);\n\nint main()\n{\n    int n, i;\n    printf(\"Input  : \");\n    scanf(\"%d\", &#x26;n);\n    printf(\"Output : \");\n    for (i = 0; i &#x3C; n; i++)\n    {\n        printf(\"%d \", fibonacci(i));\n    }\n    printf(\"\\n\");\n    return 0;\n}\n\nint fibonacci(int i)\n{\n    if (i == 0)\n        return 0;\n    else if (i == 1)\n        return 1;\n    else\n        return (fibonacci(i - 1) + fibonacci(i - 2));\n}\n\n</code></pre>\n<pre><code>// Fibonacci Series using recursion in C++\n#include &#x3C;iostream>\n#include &#x3C;map>\n\n// Big O - Time and Space Complexity\n// O(n) Time (because of the cache, otherwise time complexity would be O(2^n)\n// O(n) Space\n\n// Find the N-th Fibonacci number\nstatic unsigned long int fib(unsigned int n)\n{\n  // Cache with all the N values already calculated\n  static std::map&#x3C;unsigned int, unsigned long int> cache = {{0, 0}, {1, 1}};\n\n  // Return fib(0) = 0\n  if (n == 0)\n    return 0;\n  // Return fib(1) = 1\n  if (n == 1)\n    return 1;\n  // Return known fib(n) to avoid extra recursive steps\n  if (cache.count(n) > 0)\n    return cache.at(n);\n\n  // Save the new fib(n) into the map\n  cache.insert({n, fib(n - 1) + fib(n - 2)});\n\n  // Return the fib(n)\n  return fib(n - 1) + fib(n - 2);\n}\n\nint main()\n{\n  unsigned int n;\n  std::cout &#x3C;&#x3C; \"Choose how many N fibonacci numbers you would like to see: \";\n  std::cin >> n;\n\n  for (unsigned int pos = 0; pos &#x3C; n; pos++)\n  {\n    std::cout &#x3C;&#x3C; fib(pos) &#x3C;&#x3C; \" \";\n  }\n  std::cout &#x3C;&#x3C; std::endl;\n  return 0;\n}\n\n</code></pre>\n<pre><code>// Write a program to print fibonacci series using recursion\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc fib(n int) int {\n\tswitch n {\n\tcase 0, 1:\n\t\treturn n\n\tdefault:\n\t\treturn fib(n-1) + fib(n-2)\n\t}\n}\n\nfunc main() {\n\tvar str string\n\n\tfmt.Print(\"Input Number : \")\n\tfmt.Scan(&#x26;str)\n\n\tnum, err := strconv.Atoi(str)\n\tif err != nil || num &#x3C; 0 {\n\t\tfmt.Printf(\"Input error: %s\", str)\n\t\treturn\n\t}\n\n\tfmt.Print(\"\\nOutput : \")\n\tfor i := 0; i &#x3C; num; i++ {\n\t\tfmt.Printf(\"%d \", fib(i))\n\t}\n\tfmt.Print(\"\\n\")\n}\n\n</code></pre>\n<pre><code># Write a program to print the Fibonacci series for 'n' numbers\n\ndef Fib(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return (Fib(n-1)+Fib(n-2))\n\n\nn = int(input(\"Input: \"))\nprint('Output: ', end='')\nfor i in range(n):\n    print(Fib(i), end=' ')\n\n</code></pre>\n","markdown":"\n## Write a program to print the Fibonacci series for 'n' numbers\n\n```txt\nInput  : 10\nOutput : 0 1 1 2 3 5 8 13 21 34\n```\n\n---\n\n\n<CodeBlock>\n        \n```cs\n// Write a program to print fibonacci series using recursion\nusing System;\n\npublic class FibonaciRecursion\n{\n    public static void Main(string[] args)\n    {\n        Console.Write(\"Input  : \");\n        int num;\n        if (int.TryParse(Console.ReadLine(), out num))\n        {\n            Console.Write(\"\\nOutput : \");\n            for (int i = 0; i < num; i++)\n            {\n                Console.Write(\"{0} \", Fibonaci(i));\n            }\n            Console.WriteLine();\n        }\n        else\n        {\n            Console.WriteLine(\"Input Err\");\n        }\n    }\n\n    public static int Fibonaci(int n)\n    {\n        if (n == 0 || n == 1) return n;\n\n        return Fibonaci(n - 1) + Fibonaci(n - 2);\n    }\n}\n\n```\n                \n```js\n/*\nWrite a program to print Fibonacci series using recursion.\n\nExample:\nInput: n = 10.\nOutput: 0 1 1 2 3 5 8 13 21 34\n*/\n\nconst fib = (n) => {\n  if (n === 0) return 0;\n  if (n <= 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n};\n\nconst printFibs = (n) => {\n  let str = \"\";\n  for (let i = 0; i < n; i++) {\n    str += `${fib(i)} `;\n  }\n  console.log(str);\n};\n\nprintFibs(10);\n\n```\n                \n```java\n// Write a program to print the Fibonacci series for 'n' numbers\nimport java.util.Scanner;\n\nclass FibonacciRecursion {\n\n  public static void main(String args[]) {\n    Scanner sc = new Scanner(System.in);\n    System.out.print(\"Enter a number : \");\n    int num = sc.nextInt();\n\n    System.out.print(\"Fibonacci Series :\");\n    for (int i = 0; i <= num; i++) {\n      System.out.print(\" \" + fibo(i));\n    }\n    System.out.println();\n\n    sc.close();\n  }\n\n  static int fibo(int num) {\n    if (num < 2) {\n      return num;\n    }\n    return fibo(num - 1) + fibo(num - 2);\n  }\n}\n\n```\n                \n```c\n// Write a program to print fibonacci series using recursion\n#include <stdio.h>\n\nint fibonacci(int);\n\nint main()\n{\n    int n, i;\n    printf(\"Input  : \");\n    scanf(\"%d\", &n);\n    printf(\"Output : \");\n    for (i = 0; i < n; i++)\n    {\n        printf(\"%d \", fibonacci(i));\n    }\n    printf(\"\\n\");\n    return 0;\n}\n\nint fibonacci(int i)\n{\n    if (i == 0)\n        return 0;\n    else if (i == 1)\n        return 1;\n    else\n        return (fibonacci(i - 1) + fibonacci(i - 2));\n}\n\n```\n                \n```cpp\n// Fibonacci Series using recursion in C++\n#include <iostream>\n#include <map>\n\n// Big O - Time and Space Complexity\n// O(n) Time (because of the cache, otherwise time complexity would be O(2^n)\n// O(n) Space\n\n// Find the N-th Fibonacci number\nstatic unsigned long int fib(unsigned int n)\n{\n  // Cache with all the N values already calculated\n  static std::map<unsigned int, unsigned long int> cache = {{0, 0}, {1, 1}};\n\n  // Return fib(0) = 0\n  if (n == 0)\n    return 0;\n  // Return fib(1) = 1\n  if (n == 1)\n    return 1;\n  // Return known fib(n) to avoid extra recursive steps\n  if (cache.count(n) > 0)\n    return cache.at(n);\n\n  // Save the new fib(n) into the map\n  cache.insert({n, fib(n - 1) + fib(n - 2)});\n\n  // Return the fib(n)\n  return fib(n - 1) + fib(n - 2);\n}\n\nint main()\n{\n  unsigned int n;\n  std::cout << \"Choose how many N fibonacci numbers you would like to see: \";\n  std::cin >> n;\n\n  for (unsigned int pos = 0; pos < n; pos++)\n  {\n    std::cout << fib(pos) << \" \";\n  }\n  std::cout << std::endl;\n  return 0;\n}\n\n```\n                \n```go\n// Write a program to print fibonacci series using recursion\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc fib(n int) int {\n\tswitch n {\n\tcase 0, 1:\n\t\treturn n\n\tdefault:\n\t\treturn fib(n-1) + fib(n-2)\n\t}\n}\n\nfunc main() {\n\tvar str string\n\n\tfmt.Print(\"Input Number : \")\n\tfmt.Scan(&str)\n\n\tnum, err := strconv.Atoi(str)\n\tif err != nil || num < 0 {\n\t\tfmt.Printf(\"Input error: %s\", str)\n\t\treturn\n\t}\n\n\tfmt.Print(\"\\nOutput : \")\n\tfor i := 0; i < num; i++ {\n\t\tfmt.Printf(\"%d \", fib(i))\n\t}\n\tfmt.Print(\"\\n\")\n}\n\n```\n                \n```python\n# Write a program to print the Fibonacci series for 'n' numbers\n\ndef Fib(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return (Fib(n-1)+Fib(n-2))\n\n\nn = int(input(\"Input: \"))\nprint('Output: ', end='')\nfor i in range(n):\n    print(Fib(i), end=' ')\n\n```\n                \n</CodeBlock>\n          \n        "}