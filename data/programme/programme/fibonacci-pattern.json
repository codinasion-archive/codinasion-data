{"slug":"fibonacci-pattern","title":"Fibonacci Pattern","description":"Write a program to print Fibonacci pattern","tags":["cs","java","c","js","cpp","go","py"],"contributors":["Anzo52","waleska404","rossilor95","siddhantchimankar","rutterjt","ClasherKasten"],"latestUpdateDate":"2022-07-02T09:22:10Z","contentHtml":"<h2>Write a program to print Fibonacci pattern</h2>\n<pre><code>Input  : 5\nOutput :\n\n1\n1 1\n1 1 2\n1 1 2 3\n1 1 2 3 5\n</code></pre>\n<hr>\n<pre><code>/* program to print Fibonacci pattern using recursion.\n\nExample:\nInput: n = 5\nOutput:\n1\n1 1\n1 1 2\n1 1 2 3\n1 1 2 3 5\n*/\n\n#include &#x3C;iostream>\nusing namespace std;\n\nint fib(int n)\n{\n    if (n &#x3C;= 1)\n        return n;\n    return fib(n - 1) + fib(n - 2);\n}\n\nint main()\n{\n\n    int n;\n    cout &#x3C;&#x3C; \"Enter an Integer : \";\n    cin >> n;\n\n    for (int i = 1; i &#x3C;= n; i++)\n    {\n        for (int j = 1; j &#x3C;= i; j++)\n        {\n            cout &#x3C;&#x3C; fib(j) &#x3C;&#x3C; \" \";\n        }\n        cout &#x3C;&#x3C; \"\\n\";\n    }\n\n    return 0;\n}\n\n</code></pre>\n<pre><code>// Write a program to print Fibonacci pattern\nusing System;\n\nnamespace SimpleNumbers\n{\n    public class FibonacciPattern\n    {\n        private static void Fibonacci(int n)\n        {\n            int f1 = 0;\n            int f2 = 1;\n            int temp;\n\n            for (int i = 0; i &#x3C; n; i++)\n            {\n                Console.Write($\"{f2} \");\n                temp = f1;\n                f1 = f2;\n                f2 = temp + f1;\n            }\n            Console.WriteLine();\n        }\n\n        private static void PrintFibonacciPattern(int patternLength)\n        {\n            for (int n = 1; n &#x3C;= patternLength; n++)\n            {\n                Fibonacci (n);\n            }\n        }\n\n        public static void Main()\n        {\n            int patternLength;\n            bool isInputValid;\n\n            do\n            {\n                Console.Write(\"Enter an integer >= 2 : \");\n                isInputValid =\n                    int.TryParse(Console.ReadLine(), out patternLength);\n            }\n            while (!isInputValid || patternLength &#x3C; 2);\n\n            Console.WriteLine(\"\\nInput  : \" + patternLength);\n            Console.WriteLine(\"Output : \");\n            PrintFibonacciPattern (patternLength);\n        }\n    }\n}\n\n</code></pre>\n<pre><code>/* Write a program to print the Fibonacci pattern\n\nExample:\nInput: n = 5\nOutput:\n1\n1 1\n1 1 2\n1 1 2 3\n1 1 2 3 5\n*/\n\nconst printFibs = (n) => {\n  let str = \"\";\n  let a = 1;\n  let b = 1;\n  for (let i = 0; i &#x3C; n; i++) {\n    str += `${a} `;\n    console.log(str);\n    [a, b] = [b, a + b];\n  }\n};\n\nprintFibs(5);\n\n</code></pre>\n<pre><code>/* Write a program to print Fibonacci pattern using recursion\n\nExample:\nInput: n = 5\nOutput:\n1\n1 1\n1 1 2\n1 1 2 3\n1 1 2 3 5\n*/\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc fibonacci(n int) int {\n\tif n &#x3C;= 1 {\n\t\treturn n\n\t}\n\treturn fibonacci(n-1) + fibonacci(n-2)\n}\n\nfunc main() {\n\tvar n int\n\tfmt.Print(\"Enter an integer : \")\n\tfmt.Scan(&#x26;n)\n\n\tfor i := 1; i &#x3C;= n; i++ {\n\t\tfor j := 1; j &#x3C;= i; j++ {\n\t\t\tfmt.Print(strconv.Itoa(fibonacci(j)) + \" \")\n\t\t}\n\t\tfmt.Println()\n\t}\n}\n\n</code></pre>\n<pre><code># Write a program to print Fibonacci pattern\n\ndef fibonacci_pattern(n: int) -> int:\n    assert n > 0\n    a, b = 0, 1\n    for i in range(n):\n        print(f\"{b} \", end=\"\")\n        a, b = b, a + b\n    print(end=\"\\n\")\n\n\nif __name__ == \"__main__\":\n    pattern_lenght = int(input(\n        \"Enter the lenght of the Fibonacci pattern to generate : \"))\n    for number in range(1, pattern_lenght + 1):\n        fibonacci_pattern(number)\n\n</code></pre>\n<pre><code>// Write a program to print Fibonacci pattern\n\n#include &#x3C;stdio.h>\n#include &#x3C;math.h>\n\n#define SQRT_OF_5 (sqrt(5.0))\n#define PHI ((1 + SQRT_OF_5) / 2)\n#define PSI ((1 - SQRT_OF_5) / 2)\n\nlong long fib(long long n)\n{\n    return (long long)((pow(PHI, n) - pow(PSI, n)) / SQRT_OF_5);\n}\n\nint main(void)\n{\n    int n;\n    printf(\"Input  : \");\n    scanf(\"%d\", &#x26;n);\n    printf(\"Output :\\n\");\n    for (int i = 1; i &#x3C;= n; i++)\n    {\n        for (int j = 1; j &#x3C;= i - 1; j++)\n        {\n            printf(\"%lld \", fib(j));\n        }\n        printf(\"%lld\\n\", fib(i));\n    }\n}\n\n</code></pre>\n<pre><code>/* program to print Fibonacci pattern using recursion.\n\nExample:\nInput: n = 5\nOutput:\n1\n1 1\n1 1 2\n1 1 2 3\n1 1 2 3 5\n*/\n\nimport java.util.Scanner;\n\npublic class FibonacciPattern {\n\n  public static int fibonacci(int n) {\n    return n = (n &#x3C;= 1) ? n : fibonacci(n - 1) + fibonacci(n - 2);\n  }\n\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    System.out.print(\"Enter an integer : \");\n    int n = sc.nextInt();\n    System.out.println();\n    for (int i = 1; i &#x3C;= n; i++) {\n      for (int j = 1; j &#x3C;= i; j++) {\n        System.out.print(fibonacci(j) + \" \");\n      }\n      System.out.println();\n    }\n    sc.close();\n  }\n}\n\n</code></pre>\n<pre><code>// Write a program to print Fibonacci pattern\n\nconst readline = require(\"readline\");\n\nconst fibonacciPattern = function (n) {\n  let a = 0;\n  let b = 1;\n  for (let i = 0; i &#x3C; n; i++) {\n    process.stdout.write(`${b} `);\n    [a, b] = [b, a + b];\n  }\n  process.stdout.write(\"\\n\");\n};\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nrl.question(\n  \"Enter the lenght of the Fibonacci pattern to generate : \",\n  (patternLength) => {\n    for (let number = 1; number &#x3C;= patternLength; number++) {\n      fibonacciPattern(number);\n    }\n    rl.close();\n  }\n);\n\n</code></pre>\n","markdown":"\n## Write a program to print Fibonacci pattern\n\n```txt\nInput  : 5\nOutput :\n\n1\n1 1\n1 1 2\n1 1 2 3\n1 1 2 3 5\n```\n\n---\n\n\n<CodeBlock>\n        \n```cpp\n/* program to print Fibonacci pattern using recursion.\n\nExample:\nInput: n = 5\nOutput:\n1\n1 1\n1 1 2\n1 1 2 3\n1 1 2 3 5\n*/\n\n#include <iostream>\nusing namespace std;\n\nint fib(int n)\n{\n    if (n <= 1)\n        return n;\n    return fib(n - 1) + fib(n - 2);\n}\n\nint main()\n{\n\n    int n;\n    cout << \"Enter an Integer : \";\n    cin >> n;\n\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= i; j++)\n        {\n            cout << fib(j) << \" \";\n        }\n        cout << \"\\n\";\n    }\n\n    return 0;\n}\n\n```\n                \n```cs\n// Write a program to print Fibonacci pattern\nusing System;\n\nnamespace SimpleNumbers\n{\n    public class FibonacciPattern\n    {\n        private static void Fibonacci(int n)\n        {\n            int f1 = 0;\n            int f2 = 1;\n            int temp;\n\n            for (int i = 0; i < n; i++)\n            {\n                Console.Write($\"{f2} \");\n                temp = f1;\n                f1 = f2;\n                f2 = temp + f1;\n            }\n            Console.WriteLine();\n        }\n\n        private static void PrintFibonacciPattern(int patternLength)\n        {\n            for (int n = 1; n <= patternLength; n++)\n            {\n                Fibonacci (n);\n            }\n        }\n\n        public static void Main()\n        {\n            int patternLength;\n            bool isInputValid;\n\n            do\n            {\n                Console.Write(\"Enter an integer >= 2 : \");\n                isInputValid =\n                    int.TryParse(Console.ReadLine(), out patternLength);\n            }\n            while (!isInputValid || patternLength < 2);\n\n            Console.WriteLine(\"\\nInput  : \" + patternLength);\n            Console.WriteLine(\"Output : \");\n            PrintFibonacciPattern (patternLength);\n        }\n    }\n}\n\n```\n                \n```js\n/* Write a program to print the Fibonacci pattern\n\nExample:\nInput: n = 5\nOutput:\n1\n1 1\n1 1 2\n1 1 2 3\n1 1 2 3 5\n*/\n\nconst printFibs = (n) => {\n  let str = \"\";\n  let a = 1;\n  let b = 1;\n  for (let i = 0; i < n; i++) {\n    str += `${a} `;\n    console.log(str);\n    [a, b] = [b, a + b];\n  }\n};\n\nprintFibs(5);\n\n```\n                \n```go\n/* Write a program to print Fibonacci pattern using recursion\n\nExample:\nInput: n = 5\nOutput:\n1\n1 1\n1 1 2\n1 1 2 3\n1 1 2 3 5\n*/\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc fibonacci(n int) int {\n\tif n <= 1 {\n\t\treturn n\n\t}\n\treturn fibonacci(n-1) + fibonacci(n-2)\n}\n\nfunc main() {\n\tvar n int\n\tfmt.Print(\"Enter an integer : \")\n\tfmt.Scan(&n)\n\n\tfor i := 1; i <= n; i++ {\n\t\tfor j := 1; j <= i; j++ {\n\t\t\tfmt.Print(strconv.Itoa(fibonacci(j)) + \" \")\n\t\t}\n\t\tfmt.Println()\n\t}\n}\n\n```\n                \n```python\n# Write a program to print Fibonacci pattern\n\ndef fibonacci_pattern(n: int) -> int:\n    assert n > 0\n    a, b = 0, 1\n    for i in range(n):\n        print(f\"{b} \", end=\"\")\n        a, b = b, a + b\n    print(end=\"\\n\")\n\n\nif __name__ == \"__main__\":\n    pattern_lenght = int(input(\n        \"Enter the lenght of the Fibonacci pattern to generate : \"))\n    for number in range(1, pattern_lenght + 1):\n        fibonacci_pattern(number)\n\n```\n                \n```c\n// Write a program to print Fibonacci pattern\n\n#include <stdio.h>\n#include <math.h>\n\n#define SQRT_OF_5 (sqrt(5.0))\n#define PHI ((1 + SQRT_OF_5) / 2)\n#define PSI ((1 - SQRT_OF_5) / 2)\n\nlong long fib(long long n)\n{\n    return (long long)((pow(PHI, n) - pow(PSI, n)) / SQRT_OF_5);\n}\n\nint main(void)\n{\n    int n;\n    printf(\"Input  : \");\n    scanf(\"%d\", &n);\n    printf(\"Output :\\n\");\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= i - 1; j++)\n        {\n            printf(\"%lld \", fib(j));\n        }\n        printf(\"%lld\\n\", fib(i));\n    }\n}\n\n```\n                \n```java\n/* program to print Fibonacci pattern using recursion.\n\nExample:\nInput: n = 5\nOutput:\n1\n1 1\n1 1 2\n1 1 2 3\n1 1 2 3 5\n*/\n\nimport java.util.Scanner;\n\npublic class FibonacciPattern {\n\n  public static int fibonacci(int n) {\n    return n = (n <= 1) ? n : fibonacci(n - 1) + fibonacci(n - 2);\n  }\n\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    System.out.print(\"Enter an integer : \");\n    int n = sc.nextInt();\n    System.out.println();\n    for (int i = 1; i <= n; i++) {\n      for (int j = 1; j <= i; j++) {\n        System.out.print(fibonacci(j) + \" \");\n      }\n      System.out.println();\n    }\n    sc.close();\n  }\n}\n\n```\n                \n```js\n// Write a program to print Fibonacci pattern\n\nconst readline = require(\"readline\");\n\nconst fibonacciPattern = function (n) {\n  let a = 0;\n  let b = 1;\n  for (let i = 0; i < n; i++) {\n    process.stdout.write(`${b} `);\n    [a, b] = [b, a + b];\n  }\n  process.stdout.write(\"\\n\");\n};\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nrl.question(\n  \"Enter the lenght of the Fibonacci pattern to generate : \",\n  (patternLength) => {\n    for (let number = 1; number <= patternLength; number++) {\n      fibonacciPattern(number);\n    }\n    rl.close();\n  }\n);\n\n```\n                \n</CodeBlock>\n          \n        "}