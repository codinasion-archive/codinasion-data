{"contentHtml":"<h2>Linear Search</h2>\n<p>Linear search is the simplest searching algorithm. In Linear search, we simply traverse the list completely and match each element of the list with the target item, whose location is to be found. If the match is found, then the location of the item is returned. Otherwise, the algorithm returns NULL.</p>\n<pre><code>Input  : 10 20 80 30 60 50\nTarget : 30\n\nOutput : 3\n</code></pre>\n<p>Steps :-</p>\n<pre><code>Location 0 : 10 20 80 30 60 50\n             30                 ( No Match )\nLocation 1 : 10 20 80 30 60 50\n                30              ( No Match )\nLocation 2 : 10 20 80 30 60 50\n                   30           ( No Match )\nLocation 3 : 10 20 80 30 60 50\n                      30        ( Match !!! )\n</code></pre>\n<pre><code>Time Complexity : O(n)\n</code></pre>\n<pre><code>Space Complexity : O(1)\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h>\n\nint main()\n{\n    int n = 6;\n    int input[] = {10, 20, 80, 30, 60, 50};\n    int target = 30;\n\n    for (int i = 0; i &#x3C; n; i++)\n    {\n        if (input[i] == target)\n        {\n            printf(\"Found at index %d !!!\\n\", i);\n            return 1;\n        }\n    }\n\n    printf(\"Target Not Found !!!\\n\");\n\n    return 0;\n}\n</code></pre>\n<pre><code>class LinearSearch {\n  public static void main(String[] args) {\n    int n = 6;\n    int input[] = { 10, 20, 80, 30, 60, 50 };\n    int target = 30;\n    int result = 0;\n    for (int i = 0; i &#x3C; n; i++) {\n      if (input[i] == target) {\n        System.out.println(\"Found at index \" + i);\n        result = 1;\n      }\n    }\n    if (result == 0) {\n      System.out.println(\"Target Not Found !!!\");\n    }\n  }\n}\n</code></pre>\n","markdown":"\n## Linear Search\n\nLinear search is the simplest searching algorithm. In Linear search, we simply traverse the list completely and match each element of the list with the target item, whose location is to be found. If the match is found, then the location of the item is returned. Otherwise, the algorithm returns NULL.\n\n```txt\nInput  : 10 20 80 30 60 50\nTarget : 30\n\nOutput : 3\n```\n\nSteps :-\n\n```txt\nLocation 0 : 10 20 80 30 60 50\n             30                 ( No Match )\nLocation 1 : 10 20 80 30 60 50\n                30              ( No Match )\nLocation 2 : 10 20 80 30 60 50\n                   30           ( No Match )\nLocation 3 : 10 20 80 30 60 50\n                      30        ( Match !!! )\n```\n\n```txt\nTime Complexity : O(n)\n```\n\n```txt\nSpace Complexity : O(1)\n```\n\n---\n\n<CodeBlock>\n\n```c\n#include <stdio.h>\n\nint main()\n{\n    int n = 6;\n    int input[] = {10, 20, 80, 30, 60, 50};\n    int target = 30;\n\n    for (int i = 0; i < n; i++)\n    {\n        if (input[i] == target)\n        {\n            printf(\"Found at index %d !!!\\n\", i);\n            return 1;\n        }\n    }\n\n    printf(\"Target Not Found !!!\\n\");\n\n    return 0;\n}\n```\n\n```java\nclass LinearSearch {\n  public static void main(String[] args) {\n    int n = 6;\n    int input[] = { 10, 20, 80, 30, 60, 50 };\n    int target = 30;\n    int result = 0;\n    for (int i = 0; i < n; i++) {\n      if (input[i] == target) {\n        System.out.println(\"Found at index \" + i);\n        result = 1;\n      }\n    }\n    if (result == 0) {\n      System.out.println(\"Target Not Found !!!\");\n    }\n  }\n}\n```\n\n</CodeBlock>\n","frontMatter":{"slug":"linear-search","title":"Linear Search","description":"Linear search is the simplest searching algorithm. In Linear search, we simply traverse the list completely and match each element of the list with the target item, whose location is to be found. If the match is found, then the location of the item is returned. Otherwise, the algorithm returns NULL.","image":"https://raw.githubusercontent.com/codinasion/codinasion-dsa/master/programme/linear-search/linear-search.png","tags":["c","java"],"contributors":["harshraj8843","PrajwalBorkar"]}}