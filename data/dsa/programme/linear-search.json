{"slug":"linear-search","title":"Linear Search","description":"Linear search is the simplest searching algorithm. In Linear search, we simply traverse the list completely and match each element of the list with the target item, whose location is to be found. If the match is found, then the location of the item is returned. Otherwise, the algorithm returns NULL.","image":"https://raw.githubusercontent.com/codinasion/codinasion-dsa/master/programme/linear-search/linear-search.png","tags":["cs","java","c","cpp","go","jl","js","php","py","rs"],"contributors":["harshraj8843","PrajwalBorkar","gauravagrwal","yogeshCt3","isobarbaric","PaoloFer","ifeelblue99","JefvdA","9gl"],"latestUpdateDate":"2022-07-26T11:46:49Z","contentHtml":"<h2>Linear Search</h2>\n<p>Linear search is the simplest searching algorithm. In Linear search, we simply traverse the list completely and match each element of the list with the target item, whose location is to be found. If the match is found, then the location of the item is returned. Otherwise, the algorithm returns NULL.</p>\n<pre><code>Input  : 10 20 80 30 60 50\nTarget : 30\n\nOutput : 3\n</code></pre>\n<p>Steps :-</p>\n<pre><code>Location 0 : 10 20 80 30 60 50\n             30                 ( No Match )\nLocation 1 : 10 20 80 30 60 50\n                30              ( No Match )\nLocation 2 : 10 20 80 30 60 50\n                   30           ( No Match )\nLocation 3 : 10 20 80 30 60 50\n                      30        ( Match !!! )\n</code></pre>\n<pre><code>Time Complexity : O(n)\n</code></pre>\n<pre><code>Space Complexity : O(1)\n</code></pre>\n<hr>\n<pre><code>// Write a programme for linear search\n\nclass LinearSearch {\n\n  public static void main(String[] args) {\n    int n = 6;\n    int input[] = { 10, 20, 80, 30, 60, 50 };\n    int target = 30;\n    int result = 0;\n    for (int i = 0; i &#x3C; n; i++) {\n      if (input[i] == target) {\n        System.out.println(\"Found at index \" + i);\n        result = 1;\n      }\n    }\n    if (result == 0) {\n      System.out.println(\"Target Not Found !!!\");\n    }\n  }\n}\n\n</code></pre>\n<pre><code>// Write a programme for linear search\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        int[] input = { 10, 20, 80, 30, 60, 50 };\n        int target = 30;\n        int result = LinearSearch(input, target);\n        if (result == -1)\n            Console.WriteLine(\"Target Not Found\");\n        else\n            Console.WriteLine(\"Target Found at Index : \" + result);\n    }\n\n    public static int LinearSearch(int[] array, int target)\n    {\n        int n = array.Length - 1;\n        for (int i = 0; i &#x3C;= n; i++)\n        {\n            if (array[i] == target)\n            {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n}\n\n</code></pre>\n<pre><code>// Write a programme for linear search\n#include &#x3C;stdio.h>\n\nint main()\n{\n    int n = 6;\n    int input[] = {10, 20, 80, 30, 60, 50};\n    int target = 30;\n\n    for (int i = 0; i &#x3C; n; i++)\n    {\n        if (input[i] == target)\n        {\n            printf(\"Found at index %d !!!\\n\", i);\n            return 1;\n        }\n    }\n\n    printf(\"Target Not Found !!!\\n\");\n\n    return 0;\n}\n\n</code></pre>\n<pre><code>// Write a programme for Linear Search\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar n, i, value, target int\n\tfmt.Printf(\"Enter number of elements in the array : \")\n\tfmt.Scan(&#x26;n)\n\tvar array []int\n\tfmt.Printf(\"Enter %d elements : \\n\", n)\n\tfor i = 0; i &#x3C; n; i++ {\n\t\tfmt.Scan(&#x26;value)\n\t\tarray = append(array, value)\n\t}\n\n\tfmt.Printf(\"\\nEnter the value to search in the array : \")\n\tfmt.Scan(&#x26;target)\n\n\tvalue = -1\n\tfor i = 0; i &#x3C; n; i++ {\n\t\tif target == array[i] {\n\t\t\tvalue = i\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif value == -1 {\n\t\tfmt.Printf(\"\\n%d does not exists in the given array\\n\", target)\n\t} else {\n\t\tfmt.Printf(\"\\n%d is located at index position %d\\n\", target, value)\n\t}\n}\n\n</code></pre>\n<pre><code># Write a programme for Linear Search\n\ndef linear_search(arr, target):\n\n    for i in range(len(arr)):\n\n        if arr[i] == target:\n            print(\"Target found at index: \", i)\n            return i\n    print(\"Target not found\")\n    return None\n\n\narr = [10, 20, 80, 30, 60, 50]\ntarget = 30\n\nprint(\"List   :\", arr)\nprint(\"Target :\", target)\nprint()\n\nlinear_search(arr, target)\n\n</code></pre>\n<pre><code>//Write a programme for Linear Search in Javascript\n\nfunction linearSearch(arr, item) {\n  // Go through all the elements of arr to look for item.\n  for (var i = 0; i &#x3C; arr.length; i++) {\n    if (arr[i] === item) {\n      // Found it!\n      console.log(\"Target found at index:\", i);\n      return i;\n    }\n  }\n\n  // Item not found in the array.\n  console.log(\"Target not found\");\n  return null;\n}\n\nconst arr = [10, 20, 80, 30, 60, 50];\nlet target = 30;\n\nconsole.log(\"List   : \", arr);\nconsole.log(\"Target : \", target, \"\\n\");\n\nlinearSearch(arr, target);\n\n</code></pre>\n<pre><code>&#x3C;?php\n// Write a programme for binary search\nfunction LinearSearch($arr, $x)\n{\n    for ($i = 0; $i &#x3C; sizeof($arr); $i++) {\n        if ($arr[$i] == $x) {\n            return $i;\n        }\n\n    }\n    return -1;\n}\n$arr = array(10, 20, 80, 30, 60, 50);\n$target = 30;\necho \"Array  : \" . implode(\" \", $arr) . \"\\n\";\necho \"Target : $target\\n\";\necho \"Output : \" . LinearSearch($arr, $target);\necho \"\\n\";\n\n</code></pre>\n<pre><code># Write a programme for Linear Search.\n\nfunction find(array, target)\n    for i in 1:length(array)\n        if array[i] == target\n            return i\n        end\n    end\n    println(\"Target was not found in the given array!\")\n    return -1\nend\n\narray = [10, 20, 80, 30, 60, 50]\ntarget = 30\n\nprintln(\"Array  : \", array)\nprintln(\"Target : \", target)\nprintln(\"Index  : \", find(array, target))\n</code></pre>\n<pre><code>// Write a programme for Linear Search\n\n#include &#x3C;iostream>\n#include &#x3C;sstream>\n#include &#x3C;vector>\n#include &#x3C;string>\n\nusing namespace std;\n\nvector&#x3C;int> takeInput()\n{\n    // taking input of string containing numbers\n    string numbers;\n    cout &#x3C;&#x3C; \"Input  : \";\n    getline(cin, numbers);\n\n    // splitting string by spaces and extracting numbers\n    stringstream iss(numbers);\n    int numberInString;\n    vector&#x3C;int> input;\n    while (iss >> numberInString)\n        input.push_back(numberInString);\n\n    return input;\n}\n\nint main()\n{\n    vector&#x3C;int> numbers = takeInput();\n\n    int target;\n    cout &#x3C;&#x3C; \"Target : \";\n    cin >> target;\n\n    cout &#x3C;&#x3C; \"Output : \";\n\n    int elementIndex = -1;\n    for (int i = 0; i &#x3C; numbers.size(); i++)\n    {\n        if (numbers[i] == target)\n        {\n            elementIndex = i;\n        }\n    }\n\n    elementIndex == -1 ? cout &#x3C;&#x3C; \"Target Not Found\" : cout &#x3C;&#x3C; \"Target found at index \" &#x3C;&#x3C; elementIndex;\n    cout &#x3C;&#x3C; endl;\n\n    return 0;\n}\n\n// Code contributed by: @isobarbaric (Krish Shah)\n\n</code></pre>\n<pre><code>// Write a programme for Linear Search.\n\npub fn find&#x3C;R: AsRef&#x3C;[T]>, T: Ord>(space: R, key: T) -> Option&#x3C;usize> {\n    let space = space.as_ref();\n    for i in 0..space.len() {\n        if space[i] == key {\n            return Some(i);\n        }\n    }\n    return Some(0);\n}\n\npub fn main() {\n    let array = [10, 20, 80, 30, 60, 50];\n    let target = 30;\n\n    println!(\"Array  : {:?}\", array);\n    println!(\"Target : {}\", target);\n    println!(\"Index  : {}\", find(array, target).unwrap());\n}\n\n</code></pre>\n","markdown":"\n## Linear Search\n\nLinear search is the simplest searching algorithm. In Linear search, we simply traverse the list completely and match each element of the list with the target item, whose location is to be found. If the match is found, then the location of the item is returned. Otherwise, the algorithm returns NULL.\n\n```txt\nInput  : 10 20 80 30 60 50\nTarget : 30\n\nOutput : 3\n```\n\nSteps :-\n\n```txt\nLocation 0 : 10 20 80 30 60 50\n             30                 ( No Match )\nLocation 1 : 10 20 80 30 60 50\n                30              ( No Match )\nLocation 2 : 10 20 80 30 60 50\n                   30           ( No Match )\nLocation 3 : 10 20 80 30 60 50\n                      30        ( Match !!! )\n```\n\n```txt\nTime Complexity : O(n)\n```\n\n```txt\nSpace Complexity : O(1)\n```\n\n---\n\n\n<CodeBlock>\n        \n```java\n// Write a programme for linear search\n\nclass LinearSearch {\n\n  public static void main(String[] args) {\n    int n = 6;\n    int input[] = { 10, 20, 80, 30, 60, 50 };\n    int target = 30;\n    int result = 0;\n    for (int i = 0; i < n; i++) {\n      if (input[i] == target) {\n        System.out.println(\"Found at index \" + i);\n        result = 1;\n      }\n    }\n    if (result == 0) {\n      System.out.println(\"Target Not Found !!!\");\n    }\n  }\n}\n\n```\n                \n```cs\n// Write a programme for linear search\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        int[] input = { 10, 20, 80, 30, 60, 50 };\n        int target = 30;\n        int result = LinearSearch(input, target);\n        if (result == -1)\n            Console.WriteLine(\"Target Not Found\");\n        else\n            Console.WriteLine(\"Target Found at Index : \" + result);\n    }\n\n    public static int LinearSearch(int[] array, int target)\n    {\n        int n = array.Length - 1;\n        for (int i = 0; i <= n; i++)\n        {\n            if (array[i] == target)\n            {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n}\n\n```\n                \n```c\n// Write a programme for linear search\n#include <stdio.h>\n\nint main()\n{\n    int n = 6;\n    int input[] = {10, 20, 80, 30, 60, 50};\n    int target = 30;\n\n    for (int i = 0; i < n; i++)\n    {\n        if (input[i] == target)\n        {\n            printf(\"Found at index %d !!!\\n\", i);\n            return 1;\n        }\n    }\n\n    printf(\"Target Not Found !!!\\n\");\n\n    return 0;\n}\n\n```\n                \n```go\n// Write a programme for Linear Search\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar n, i, value, target int\n\tfmt.Printf(\"Enter number of elements in the array : \")\n\tfmt.Scan(&n)\n\tvar array []int\n\tfmt.Printf(\"Enter %d elements : \\n\", n)\n\tfor i = 0; i < n; i++ {\n\t\tfmt.Scan(&value)\n\t\tarray = append(array, value)\n\t}\n\n\tfmt.Printf(\"\\nEnter the value to search in the array : \")\n\tfmt.Scan(&target)\n\n\tvalue = -1\n\tfor i = 0; i < n; i++ {\n\t\tif target == array[i] {\n\t\t\tvalue = i\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif value == -1 {\n\t\tfmt.Printf(\"\\n%d does not exists in the given array\\n\", target)\n\t} else {\n\t\tfmt.Printf(\"\\n%d is located at index position %d\\n\", target, value)\n\t}\n}\n\n```\n                \n```python\n# Write a programme for Linear Search\n\ndef linear_search(arr, target):\n\n    for i in range(len(arr)):\n\n        if arr[i] == target:\n            print(\"Target found at index: \", i)\n            return i\n    print(\"Target not found\")\n    return None\n\n\narr = [10, 20, 80, 30, 60, 50]\ntarget = 30\n\nprint(\"List   :\", arr)\nprint(\"Target :\", target)\nprint()\n\nlinear_search(arr, target)\n\n```\n                \n```js\n//Write a programme for Linear Search in Javascript\n\nfunction linearSearch(arr, item) {\n  // Go through all the elements of arr to look for item.\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] === item) {\n      // Found it!\n      console.log(\"Target found at index:\", i);\n      return i;\n    }\n  }\n\n  // Item not found in the array.\n  console.log(\"Target not found\");\n  return null;\n}\n\nconst arr = [10, 20, 80, 30, 60, 50];\nlet target = 30;\n\nconsole.log(\"List   : \", arr);\nconsole.log(\"Target : \", target, \"\\n\");\n\nlinearSearch(arr, target);\n\n```\n                \n```php\n<?php\n// Write a programme for binary search\nfunction LinearSearch($arr, $x)\n{\n    for ($i = 0; $i < sizeof($arr); $i++) {\n        if ($arr[$i] == $x) {\n            return $i;\n        }\n\n    }\n    return -1;\n}\n$arr = array(10, 20, 80, 30, 60, 50);\n$target = 30;\necho \"Array  : \" . implode(\" \", $arr) . \"\\n\";\necho \"Target : $target\\n\";\necho \"Output : \" . LinearSearch($arr, $target);\necho \"\\n\";\n\n```\n                \n```julia\n# Write a programme for Linear Search.\n\nfunction find(array, target)\n    for i in 1:length(array)\n        if array[i] == target\n            return i\n        end\n    end\n    println(\"Target was not found in the given array!\")\n    return -1\nend\n\narray = [10, 20, 80, 30, 60, 50]\ntarget = 30\n\nprintln(\"Array  : \", array)\nprintln(\"Target : \", target)\nprintln(\"Index  : \", find(array, target))\n```\n                \n```cpp\n// Write a programme for Linear Search\n\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nvector<int> takeInput()\n{\n    // taking input of string containing numbers\n    string numbers;\n    cout << \"Input  : \";\n    getline(cin, numbers);\n\n    // splitting string by spaces and extracting numbers\n    stringstream iss(numbers);\n    int numberInString;\n    vector<int> input;\n    while (iss >> numberInString)\n        input.push_back(numberInString);\n\n    return input;\n}\n\nint main()\n{\n    vector<int> numbers = takeInput();\n\n    int target;\n    cout << \"Target : \";\n    cin >> target;\n\n    cout << \"Output : \";\n\n    int elementIndex = -1;\n    for (int i = 0; i < numbers.size(); i++)\n    {\n        if (numbers[i] == target)\n        {\n            elementIndex = i;\n        }\n    }\n\n    elementIndex == -1 ? cout << \"Target Not Found\" : cout << \"Target found at index \" << elementIndex;\n    cout << endl;\n\n    return 0;\n}\n\n// Code contributed by: @isobarbaric (Krish Shah)\n\n```\n                \n```rust\n// Write a programme for Linear Search.\n\npub fn find<R: AsRef<[T]>, T: Ord>(space: R, key: T) -> Option<usize> {\n    let space = space.as_ref();\n    for i in 0..space.len() {\n        if space[i] == key {\n            return Some(i);\n        }\n    }\n    return Some(0);\n}\n\npub fn main() {\n    let array = [10, 20, 80, 30, 60, 50];\n    let target = 30;\n\n    println!(\"Array  : {:?}\", array);\n    println!(\"Target : {}\", target);\n    println!(\"Index  : {}\", find(array, target).unwrap());\n}\n\n```\n                \n</CodeBlock>\n          \n        "}