{"slug":"selection-sort","title":"Selection Sort","description":"Selection sort algorithm sorts an array by repeatedly finding the minimum element from unsorted part and putting it at the beginning.","image":"https://raw.githubusercontent.com/codinasion/codinasion-dsa/master/programme/selection-sort/selection-sort.png","tags":["c","cpp","java","js","py"],"contributors":["anastazir","DaltonCash","curious0207","Ashad001"],"latestUpdateDate":"2022-08-06T12:52:21Z","contentHtml":"<h2>Selection Sort</h2>\n<p>Selection sort algorithm sorts an array by repeatedly finding the minimum element from unsorted part and putting it at the beginning.</p>\n<pre><code>Input  : 5 4 1 6 2\nOutput : 1 2 4 5 6\n</code></pre>\n<pre><code>Time Complexity : O(n^2)\n</code></pre>\n<pre><code>Space Complexity : O(1)\n</code></pre>\n<hr>\n<pre><code>// Write a programme for selection sort\n#include &#x3C;bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n    // Selection sort Time complexity- O(n^2) , Space complexity- O(1).\n    int arr[] = {5, 4, 1, 6, 2};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    cout &#x3C;&#x3C; \"Before Selection Sort : \";\n    for (int i = 0; i &#x3C; n; i++)\n    {\n        cout &#x3C;&#x3C; arr[i] &#x3C;&#x3C; \" \";\n    }\n    cout &#x3C;&#x3C; endl;\n    \n    for (int i = 0; i &#x3C; n; i++)\n    {\n        int min_index = i;\n        for (int j = i + 1; j &#x3C; n; j++)\n        {\n            if (arr[j] &#x3C; arr[min_index])\n            { // comparing\n                min_index = j;\n            }\n        }\n        int temp = arr[i]; // swapping minimum element from unsorted array with ith element.\n        arr[i] = arr[min_index];\n        arr[min_index] = temp;\n    }\n\n    cout &#x3C;&#x3C; \"After  Selection Sort : \";\n    for (int i = 0; i &#x3C; n; i++)\n    {\n        cout &#x3C;&#x3C; arr[i] &#x3C;&#x3C; \" \";\n    }\n    cout &#x3C;&#x3C; endl;\n\n    return 0;\n}\n\n</code></pre>\n<pre><code>#include &#x3C;stdio.h>\n\nint Min(int* arr, int start, int end);\n\n// Selection sort Time complexity O(n^2), Space complexity O(1).\nvoid SelectionSort(int* arr, int n);\n\nint main()\n{\n    int arr[] = { 5 ,4 ,1 ,6 ,2 };\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    printf(\"Array after sorting: \\n\");\n    for (int i = 0; i &#x3C; n; i++)\n    {\n        printf(\"%d \", arr[i]);\n    }\n\n    SelectionSort(arr, n);\n\n    printf(\"\\nArray after sorting: \\n\");\n    for (int i = 0; i &#x3C; n; i++)\n    {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}\n\nint Min(int* arr, int start, int end) // Takes a particular range and finds the minimum within that range in the array\n{\n    // Set the minimum value to the maximum number\n    int min = 0;\n    int index = 0;\n    for (int i = start; i &#x3C; end; i++)\n    {\n        // Check every element if it is less then the previous min value update the min value!\n        if (arr[i] &#x3C; min || i == start)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    return index;\n}\n\nvoid SelectionSort(int* arr, int n)\n{\n    for (int i = 0; i &#x3C; n; i++)\n    {\n        // Checks the minimum number in an array within i and array's last element\n        // And replaces it with the i(th) element.\n        int first = i;\n        int min = Min(arr, first, n);\n        int temp = arr[first];\n        arr[first] = arr[min];\n        arr[min] = temp;\n    }\n}\n\n\n</code></pre>\n<pre><code>// Write a programme for Selection Sort\n\nconst arr = [0, 100, 55, 20, 13, 10];\n\nfunction selectionSort(arr) {\n  for (let i = 0; i &#x3C; arr.length; i++) {\n    let min = i;\n    for (let j = i + 1; j &#x3C; arr.length; j++) {\n      if (ascending) {\n        if (arr[j] &#x3C; arr[min]) {\n          min = j;\n        }\n      } else {\n        if (arr[j] > arr[min]) {\n          min = j;\n        }\n      }\n    }\n    if (min != i) {\n      let tmp = arr[i];\n      arr[i] = arr[min];\n      arr[min] = tmp;\n    }\n  }\n  return arr;\n}\n\nconsole.log(\"Unsorted List : \", arr);\nconsole.log(\"Sorted List   : \", selectionSort(arr, (ascending = true)));\n\n</code></pre>\n<pre><code># Write a programme for Selection Sort\n\narr = [0, 100, 55, 20, 13, 10]\n\ndef selection_sort(arr, ascending=True):\n    for i in range(len(arr)):\n        mid = i\n        for j in range(i+1, len(arr)):\n            if ascending:\n                if arr[mid] > arr[j]:\n                    mid = j\n            else:\n                if arr[mid] &#x3C; arr[j]:\n                    mid = j\n        arr[i], arr[mid] = arr[mid], arr[i]\n    return arr\n\nprint(\"Unsorted List : \", arr)\nprint(\"Sorted List   : \", selection_sort(arr, ascending=True))\n\n</code></pre>\n<pre><code>// Write a programme for selection sort\npublic class SelectionSort {\n\n  public static void main(String a[]) {\n    int[] arr = { 5, 4, 1, 6, 2 };\n\n    System.out.print(\"Before Selection Sort : \");\n    for (int i : arr) {\n      System.out.print(i + \" \");\n    }\n    selectionSort(arr);\n\n    System.out.print(\"\\n\" + \"After  Selection Sort : \");\n    for (int i : arr) {\n      System.out.print(i + \" \");\n    }\n    System.out.println();\n  }\n\n  public static void selectionSort(int[] arr) {\n    for (int i = 0; i &#x3C; arr.length - 1; i++) {\n      int index = i;\n      for (int j = i + 1; j &#x3C; arr.length; j++) {\n        if (arr[j] &#x3C; arr[index]) {\n          index = j;\n        }\n      }\n      int smallerNumber = arr[index];\n      arr[index] = arr[i];\n      arr[i] = smallerNumber;\n    }\n  }\n}\n\n</code></pre>\n","markdown":"\n## Selection Sort\n\nSelection sort algorithm sorts an array by repeatedly finding the minimum element from unsorted part and putting it at the beginning.\n\n```txt\nInput  : 5 4 1 6 2\nOutput : 1 2 4 5 6\n```\n\n```txt\nTime Complexity : O(n^2)\n```\n\n```txt\nSpace Complexity : O(1)\n```\n\n---\n\n\n<CodeBlock>\n        \n```cpp\n// Write a programme for selection sort\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n    // Selection sort Time complexity- O(n^2) , Space complexity- O(1).\n    int arr[] = {5, 4, 1, 6, 2};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    cout << \"Before Selection Sort : \";\n    for (int i = 0; i < n; i++)\n    {\n        cout << arr[i] << \" \";\n    }\n    cout << endl;\n    \n    for (int i = 0; i < n; i++)\n    {\n        int min_index = i;\n        for (int j = i + 1; j < n; j++)\n        {\n            if (arr[j] < arr[min_index])\n            { // comparing\n                min_index = j;\n            }\n        }\n        int temp = arr[i]; // swapping minimum element from unsorted array with ith element.\n        arr[i] = arr[min_index];\n        arr[min_index] = temp;\n    }\n\n    cout << \"After  Selection Sort : \";\n    for (int i = 0; i < n; i++)\n    {\n        cout << arr[i] << \" \";\n    }\n    cout << endl;\n\n    return 0;\n}\n\n```\n                \n```c\n#include <stdio.h>\n\nint Min(int* arr, int start, int end);\n\n// Selection sort Time complexity O(n^2), Space complexity O(1).\nvoid SelectionSort(int* arr, int n);\n\nint main()\n{\n    int arr[] = { 5 ,4 ,1 ,6 ,2 };\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    printf(\"Array after sorting: \\n\");\n    for (int i = 0; i < n; i++)\n    {\n        printf(\"%d \", arr[i]);\n    }\n\n    SelectionSort(arr, n);\n\n    printf(\"\\nArray after sorting: \\n\");\n    for (int i = 0; i < n; i++)\n    {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}\n\nint Min(int* arr, int start, int end) // Takes a particular range and finds the minimum within that range in the array\n{\n    // Set the minimum value to the maximum number\n    int min = 0;\n    int index = 0;\n    for (int i = start; i < end; i++)\n    {\n        // Check every element if it is less then the previous min value update the min value!\n        if (arr[i] < min || i == start)\n        {\n            min = arr[i];\n            index = i;\n        }\n    }\n    return index;\n}\n\nvoid SelectionSort(int* arr, int n)\n{\n    for (int i = 0; i < n; i++)\n    {\n        // Checks the minimum number in an array within i and array's last element\n        // And replaces it with the i(th) element.\n        int first = i;\n        int min = Min(arr, first, n);\n        int temp = arr[first];\n        arr[first] = arr[min];\n        arr[min] = temp;\n    }\n}\n\n\n```\n                \n```js\n// Write a programme for Selection Sort\n\nconst arr = [0, 100, 55, 20, 13, 10];\n\nfunction selectionSort(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    let min = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (ascending) {\n        if (arr[j] < arr[min]) {\n          min = j;\n        }\n      } else {\n        if (arr[j] > arr[min]) {\n          min = j;\n        }\n      }\n    }\n    if (min != i) {\n      let tmp = arr[i];\n      arr[i] = arr[min];\n      arr[min] = tmp;\n    }\n  }\n  return arr;\n}\n\nconsole.log(\"Unsorted List : \", arr);\nconsole.log(\"Sorted List   : \", selectionSort(arr, (ascending = true)));\n\n```\n                \n```python\n# Write a programme for Selection Sort\n\narr = [0, 100, 55, 20, 13, 10]\n\ndef selection_sort(arr, ascending=True):\n    for i in range(len(arr)):\n        mid = i\n        for j in range(i+1, len(arr)):\n            if ascending:\n                if arr[mid] > arr[j]:\n                    mid = j\n            else:\n                if arr[mid] < arr[j]:\n                    mid = j\n        arr[i], arr[mid] = arr[mid], arr[i]\n    return arr\n\nprint(\"Unsorted List : \", arr)\nprint(\"Sorted List   : \", selection_sort(arr, ascending=True))\n\n```\n                \n```java\n// Write a programme for selection sort\npublic class SelectionSort {\n\n  public static void main(String a[]) {\n    int[] arr = { 5, 4, 1, 6, 2 };\n\n    System.out.print(\"Before Selection Sort : \");\n    for (int i : arr) {\n      System.out.print(i + \" \");\n    }\n    selectionSort(arr);\n\n    System.out.print(\"\\n\" + \"After  Selection Sort : \");\n    for (int i : arr) {\n      System.out.print(i + \" \");\n    }\n    System.out.println();\n  }\n\n  public static void selectionSort(int[] arr) {\n    for (int i = 0; i < arr.length - 1; i++) {\n      int index = i;\n      for (int j = i + 1; j < arr.length; j++) {\n        if (arr[j] < arr[index]) {\n          index = j;\n        }\n      }\n      int smallerNumber = arr[index];\n      arr[index] = arr[i];\n      arr[i] = smallerNumber;\n    }\n  }\n}\n\n```\n                \n</CodeBlock>\n          \n        "}