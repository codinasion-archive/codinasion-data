{"slug":"selection-sort","title":"Selection Sort","description":"Selection sort algorithm sorts an array by repeatedly finding the minimum element from unsorted part and putting it at the beginning.","image":"https://raw.githubusercontent.com/codinasion/codinasion-dsa/master/programme/selection-sort/selection-sort.png","tags":["java","py"],"contributors":["anastazir","DaltonCash"],"latestUpdateDate":"2022-07-29T13:11:11Z","contentHtml":"<h2>Selection Sort</h2>\n<p>Selection sort algorithm sorts an array by repeatedly finding the minimum element from unsorted part and putting it at the beginning.</p>\n<pre><code>Input  : 5 4 1 6 2\nOutput : 1 2 4 5 6\n</code></pre>\n<pre><code>Time Complexity : O(n^2)\n</code></pre>\n<pre><code>Space Complexity : O(1)\n</code></pre>\n<hr>\n<pre><code>// Write a programme for selection sort\npublic class SelectionSort {\n\n  public static void main(String a[]) {\n    int[] arr = { 5, 4, 1, 6, 2 };\n\n    System.out.print(\"Before Selection Sort : \");\n    for (int i : arr) {\n      System.out.print(i + \" \");\n    }\n    selectionSort(arr);\n\n    System.out.print(\"\\n\" + \"After  Selection Sort : \");\n    for (int i : arr) {\n      System.out.print(i + \" \");\n    }\n    System.out.println();\n  }\n\n  public static void selectionSort(int[] arr) {\n    for (int i = 0; i &#x3C; arr.length - 1; i++) {\n      int index = i;\n      for (int j = i + 1; j &#x3C; arr.length; j++) {\n        if (arr[j] &#x3C; arr[index]) {\n          index = j;\n        }\n      }\n      int smallerNumber = arr[index];\n      arr[index] = arr[i];\n      arr[i] = smallerNumber;\n    }\n  }\n}\n\n</code></pre>\n<pre><code># Write a programme for Selection Sort\n\narr = [0, 100, 55, 20, 13, 10]\n\ndef selection_sort(arr, ascending=True):\n    for i in range(len(arr)):\n        mid = i\n        for j in range(i+1, len(arr)):\n            if ascending:\n                if arr[mid] > arr[j]:\n                    mid = j\n            else:\n                if arr[mid] &#x3C; arr[j]:\n                    mid = j\n        arr[i], arr[mid] = arr[mid], arr[i]\n    return arr\n\nprint(\"Unsorted List : \", arr)\nprint(\"Sorted List   : \", selection_sort(arr, ascending=True))\n\n</code></pre>\n","markdown":"\n## Selection Sort\n\nSelection sort algorithm sorts an array by repeatedly finding the minimum element from unsorted part and putting it at the beginning.\n\n```txt\nInput  : 5 4 1 6 2\nOutput : 1 2 4 5 6\n```\n\n```txt\nTime Complexity : O(n^2)\n```\n\n```txt\nSpace Complexity : O(1)\n```\n\n---\n\n\n<CodeBlock>\n        \n```java\n// Write a programme for selection sort\npublic class SelectionSort {\n\n  public static void main(String a[]) {\n    int[] arr = { 5, 4, 1, 6, 2 };\n\n    System.out.print(\"Before Selection Sort : \");\n    for (int i : arr) {\n      System.out.print(i + \" \");\n    }\n    selectionSort(arr);\n\n    System.out.print(\"\\n\" + \"After  Selection Sort : \");\n    for (int i : arr) {\n      System.out.print(i + \" \");\n    }\n    System.out.println();\n  }\n\n  public static void selectionSort(int[] arr) {\n    for (int i = 0; i < arr.length - 1; i++) {\n      int index = i;\n      for (int j = i + 1; j < arr.length; j++) {\n        if (arr[j] < arr[index]) {\n          index = j;\n        }\n      }\n      int smallerNumber = arr[index];\n      arr[index] = arr[i];\n      arr[i] = smallerNumber;\n    }\n  }\n}\n\n```\n                \n```python\n# Write a programme for Selection Sort\n\narr = [0, 100, 55, 20, 13, 10]\n\ndef selection_sort(arr, ascending=True):\n    for i in range(len(arr)):\n        mid = i\n        for j in range(i+1, len(arr)):\n            if ascending:\n                if arr[mid] > arr[j]:\n                    mid = j\n            else:\n                if arr[mid] < arr[j]:\n                    mid = j\n        arr[i], arr[mid] = arr[mid], arr[i]\n    return arr\n\nprint(\"Unsorted List : \", arr)\nprint(\"Sorted List   : \", selection_sort(arr, ascending=True))\n\n```\n                \n</CodeBlock>\n          \n        "}