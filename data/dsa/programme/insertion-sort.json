{"slug":"insertion-sort","title":"Insertion Sort","description":"Insertion sort is a sorting algorithm in which the elements are transferred one at a time to the right position. In other words, an insertion sort helps in building the final sorted list, one item at a time, with the movement of higher-ranked elements.","image":"https://raw.githubusercontent.com/codinasion/codinasion-dsa/master/programme/insertion-sort/insertion-sort.png","tags":["cpp","py","js"],"contributors":["anastazir","KacperTKI","sou127"],"latestUpdateDate":"2022-08-06T13:03:27Z","contentHtml":"<h2>Insertion Sort</h2>\n<p>Insertion sort is a sorting algorithm in which the elements are transferred one at a time to the right position. In other words, an insertion sort helps in building the final sorted list, one item at a time, with the movement of higher-ranked elements.</p>\n<pre><code>Input  : 5 4 1 6 2\nOutput : 1 2 4 5 6\n</code></pre>\n<pre><code>Time Complexity : O(n^2)\n</code></pre>\n<pre><code>Space Complexity : O(1)\n</code></pre>\n<hr>\n<pre><code>// Write a program for insertion sort in JavaScript\nfunction insertionSort(arr){\n    let n = arr.length;\n    let i,j,key;\n\tfor (i = 1; i &#x3C; n; i++){\n\t\tkey = arr[i];\n\t\tj = i - 1;\n\t\twhile (j >= 0 &#x26;&#x26; arr[j] > key){\n\t\t\tarr[j + 1] = arr[j];\n\t\t\tj = j - 1;\n\t\t}\n\t\tarr[j + 1] = key;\n\t}\n    return arr;\n}\n\n\nlet arr = [14, 33, 27, 35 ,10];\nconsole.log(\"Input: \", arr)\nconsole.log(\"Output: \", insertionSort(arr));\n</code></pre>\n<pre><code># Write a programme for insertion sort\n\ndef insertion_sort(arr):\n\n    for i in range(1, len(arr)):\n\n        curr = arr[i]\n\n        j = i-1\n\n        while j >=0 and curr &#x3C; arr[j] :\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = curr\n\n    return arr\n \narr = [5, 4, 1, 6, 2]\n\nprint(\"Unsorted list, \", arr)\nprint(\"Sorted list,   \", insertion_sort(arr))\n</code></pre>\n<pre><code>#include &#x3C;iostream>\n\nvoid printArray(int *array, int size);\nvoid insertionSort(int *array, int size);\n\nint main() {\n    int array[] = { 5, 4, 1, 6, 2 };\n    int size = sizeof(array) / sizeof(array[0]);\n    printArray(array, size);\n\n    insertionSort(array, size);\n\n    printArray(array, size);\n\n    return 0;\n}\n\nvoid printArray(int *array, int size) {\n    for (int i = 0; i &#x3C; size; i++) {\n        std::cout &#x3C;&#x3C; array[i] &#x3C;&#x3C; \" \";\n    }\n    std::cout &#x3C;&#x3C; '\\n';\n}\n\nvoid insertionSort(int *array, int size) {\n    // loop through the array\n    for (int i = 1; i &#x3C; size; i++) { // note that the first element can be skipped\n        // store the current value\n        int currVal = array[i];\n        int j = i;\n        // go backwards in the array, as long as the values behind are larger than the current value\n        while (j > 0 &#x26;&#x26; array[j-1] > currVal) {\n            // while they are larger, move them to the right\n            array[j] = array[j - 1];\n            j--;\n        }\n        // when there are no larger elements, put the current value in the empty spot\n        array[j] = currVal; \n    }\n}\n</code></pre>\n","markdown":"\n## Insertion Sort\n\nInsertion sort is a sorting algorithm in which the elements are transferred one at a time to the right position. In other words, an insertion sort helps in building the final sorted list, one item at a time, with the movement of higher-ranked elements.\n\n```txt\nInput  : 5 4 1 6 2\nOutput : 1 2 4 5 6\n```\n\n```txt\nTime Complexity : O(n^2)\n```\n\n```txt\nSpace Complexity : O(1)\n```\n\n---\n\n\n<CodeBlock>\n        \n```js\n// Write a program for insertion sort in JavaScript\nfunction insertionSort(arr){\n    let n = arr.length;\n    let i,j,key;\n\tfor (i = 1; i < n; i++){\n\t\tkey = arr[i];\n\t\tj = i - 1;\n\t\twhile (j >= 0 && arr[j] > key){\n\t\t\tarr[j + 1] = arr[j];\n\t\t\tj = j - 1;\n\t\t}\n\t\tarr[j + 1] = key;\n\t}\n    return arr;\n}\n\n\nlet arr = [14, 33, 27, 35 ,10];\nconsole.log(\"Input: \", arr)\nconsole.log(\"Output: \", insertionSort(arr));\n```\n                \n```python\n# Write a programme for insertion sort\n\ndef insertion_sort(arr):\n\n    for i in range(1, len(arr)):\n\n        curr = arr[i]\n\n        j = i-1\n\n        while j >=0 and curr < arr[j] :\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = curr\n\n    return arr\n \narr = [5, 4, 1, 6, 2]\n\nprint(\"Unsorted list, \", arr)\nprint(\"Sorted list,   \", insertion_sort(arr))\n```\n                \n```cpp\n#include <iostream>\n\nvoid printArray(int *array, int size);\nvoid insertionSort(int *array, int size);\n\nint main() {\n    int array[] = { 5, 4, 1, 6, 2 };\n    int size = sizeof(array) / sizeof(array[0]);\n    printArray(array, size);\n\n    insertionSort(array, size);\n\n    printArray(array, size);\n\n    return 0;\n}\n\nvoid printArray(int *array, int size) {\n    for (int i = 0; i < size; i++) {\n        std::cout << array[i] << \" \";\n    }\n    std::cout << '\\n';\n}\n\nvoid insertionSort(int *array, int size) {\n    // loop through the array\n    for (int i = 1; i < size; i++) { // note that the first element can be skipped\n        // store the current value\n        int currVal = array[i];\n        int j = i;\n        // go backwards in the array, as long as the values behind are larger than the current value\n        while (j > 0 && array[j-1] > currVal) {\n            // while they are larger, move them to the right\n            array[j] = array[j - 1];\n            j--;\n        }\n        // when there are no larger elements, put the current value in the empty spot\n        array[j] = currVal; \n    }\n}\n```\n                \n</CodeBlock>\n          \n        "}