{"slug":"binary-search","title":"Binary Search","description":"Binary search is searching algorithm with which given a sorted array it is able to search for a target by repeatedly dividing the search interval in half making use of the fact that the array is sorted and achieving much lower time complexity compared to linear search.","image":"https://raw.githubusercontent.com/codinasion/codinasion-dsa/master/programme/binary-search/binary-search.png","tags":["cs","c","cpp","go","jl","js","php","py","rs","java"],"contributors":["RogerMReyes","Darren-R","ihammadasghar","MadhuS-1605","rashmod","n1ongol","SpirosArk"],"latestUpdateDate":"2022-07-21T10:47:56Z","contentHtml":"<h2>Binary Search</h2>\n<p>Binary search is searching algorithm with which given a sorted array it is able to search for a target by repeatedly dividing the search interval in half making use of the fact that the array is sorted and achieving much lower time complexity compared to linear search.</p>\n<pre><code>Input  : 10 20 30 50 60 80\nTarget : 30\n\nOutput : 2\n</code></pre>\n<pre><code>Time Complexity : O(Log n)\n</code></pre>\n<pre><code>Space Complexity : O(1)\n</code></pre>\n<hr>\n<pre><code>// Write a programme for binary search\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar arr []int\n\tfmt.Print(\"Enter the size of array : \")\n\tvar size int\n\tfmt.Scan(&#x26;size)\n\n\tfor i := 0; i &#x3C; size; i++ {\n\t\tvar elem int\n\t\tfmt.Print(\"Enter element : \")\n\t\tfmt.Scan(&#x26;elem)\n\t\tarr = append(arr, elem)\n\t}\n\tvar n int\n\tfmt.Print(\"\\nEnter a number : \")\n\tfmt.Scan(&#x26;n)\n\tfmt.Println(\"\\nOutput :\", n, \"is found at index\", binarySearch(arr, n))\n}\n\nfunc binarySearch(arr []int, n int) int {\n\tvar low int = 0\n\tvar high int = len(arr) - 1\n\tvar mid int\n\tfor low &#x3C;= high {\n\t\tmid = (low + high) / 2\n\t\tif arr[mid] == n {\n\t\t\treturn mid\n\t\t} else if arr[mid] &#x3C; n {\n\t\t\tlow = mid + 1\n\t\t} else {\n\t\t\thigh = mid - 1\n\t\t}\n\t}\n\treturn -1\n}\n\n</code></pre>\n<pre><code>// Write a programme for binary search\nusing System;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        int[] example = new int[] { 10, 20, 30, 50, 60, 80 };\n        int target = 30;\n\n        string stringExample = printArray(example);\n        Console.WriteLine($\"Input  : {stringExample}\");\n        Console.WriteLine($\"Target : {target}\");\n        Console.WriteLine($\"\\nOutput : {BinarySearch(example, target)}\");\n    }\n\n    public static string printArray(int[] array)\n    {\n        string stringExample = \"\";\n        for (int i = 0; i &#x3C; array.Length; i++)\n        {\n            stringExample += $\"{array[i]} \";\n        }\n        return stringExample;\n    }\n\n    public static object BinarySearch(int[] inputArray, int key)\n    {\n        int min = 0;\n        int max = inputArray.Length - 1;\n        while (min &#x3C;= max)\n        {\n            int mid = (min + max) / 2;\n            if (key == inputArray[mid])\n            {\n                return mid++;\n            }\n            else if (key &#x3C; inputArray[mid])\n            {\n                max = mid - 1;\n            }\n            else\n            {\n                min = mid + 1;\n            }\n        }\n        return \"Nil\";\n    }\n}\n\n</code></pre>\n<pre><code>// Write a programme for binary search\n#include &#x3C;stdio.h>\n\nint binarySearch(int array[], int x, int low, int high)\n{\n  // Repeat until the pointers low and high meet each other\n  while (low &#x3C;= high)\n  {\n    int mid = low + (high - low) / 2;\n\n    if (array[mid] == x)\n      return mid;\n\n    if (array[mid] &#x3C; x)\n      low = mid + 1;\n\n    else\n      high = mid - 1;\n  }\n\n  return -1;\n}\n\nint main(void)\n{\n  int array[] = {10, 20, 30, 50, 60, 80};\n  int n = sizeof(array) / sizeof(array[0]);\n  int x = 30;\n  printf(\"Array  : \");\n  for (int i = 0; i &#x3C; n; i++)\n    printf(\"%d \", array[i]);\n  printf(\"\\nTarget : %d\\n\", x);\n  int result = binarySearch(array, x, 0, n - 1);\n  printf(\"Output : \");\n  if (result == -1)\n    printf(\"Not found\");\n  else\n    printf(\"%d\", result);\n  printf(\"\\n\");\n  return 0;\n}\n\n</code></pre>\n<pre><code>// Write a programme for binary search\nconst binarySearch = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low &#x3C;= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    } else if (arr[mid] &#x3C;= target) {\n      low = mid + 1;\n    } else if (arr[mid] >= target) {\n      high = mid - 1;\n    }\n  }\n  return -1;\n};\n\nconst arr = [10, 20, 30, 40, 50];\nconst target = 30;\n\nconsole.log(\"Input  : \", arr);\nconsole.log(\"Target : \", target);\nconsole.log(\"Output : \", binarySearch(arr, target));\n\n</code></pre>\n<pre><code>&#x3C;?php\n/**\n * Binary search implementation\n *\n * @param array $arr The sorted array\n * @param int $value The value needs to be search in an array\n * @return int The index of the search key if found, otherwise -1\n */\nfunction binarySearch($arr, $value)\n{\n\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low &#x3C;= $high) {\n        //calculate mid\n        $mid = ($low + $high) / 2;\n/*\nIf value we are searching found at mid position\nthen return it's index\n */\n        if ($value == $arr[$mid]) {\n            return $mid;\n        } else if ($value &#x3C; $arr[$mid]) {\n            $high = $mid - 1;\n        } else if ($value > $arr[$mid + 1]) {\n            $low = $mid + 1;\n        }\n    }\n    return -1;\n}\n$arr = array(1, 3, 5, 6, 7, 8, 9);\n$value = 6;\n\necho \"Array  : \" . implode(', ', $arr) . \"\\n\";\necho \"Target : \" . $value . \"\\n\";\n\n/* Call binary search function,\nwhich returns index at which value is found.\n */\n\n$index = binarySearch($arr, $value);\n\necho \"Output : \";\n//if index is -1, then value is not present\nif ($index == -1) {\n    echo \"search key is not found\";\n} else {\n    echo \"search element is found at index \" . $index;\n}\necho \"\\n\";\n\n</code></pre>\n<pre><code>// write a programme for binary search\n#include &#x3C;iostream>\n\nusing namespace std;\n\nint binary_search(int *tab, int size, int target);\n\nint main()\n{\n    int input[] = {10, 20, 30, 50, 60, 80};\n    int target = 30;\n\n    cout &#x3C;&#x3C; \"Input  : \";\n    for (int i = 0; i &#x3C; 6; i++)\n    {\n        cout &#x3C;&#x3C; input[i] &#x3C;&#x3C; \" \";\n    }\n\n    cout &#x3C;&#x3C; \"\\nTarget : \" &#x3C;&#x3C; target &#x3C;&#x3C; endl;\n    \n    int result = binary_search(input, sizeof(input) / sizeof(int), target);\n    cout &#x3C;&#x3C; \"\\nOutput : \";\n    if (result == -1)\n    {\n        cout &#x3C;&#x3C; \"Not found\" &#x3C;&#x3C; endl;\n    }\n    else\n    {\n        cout &#x3C;&#x3C; \"Found at index \" &#x3C;&#x3C; result &#x3C;&#x3C; endl;\n    }\n\n    return 0;\n}\n\nint binary_search(int *arr, int size, int target)\n{\n\n    int left = 0,\n        right = size - 1;\n\n    while (left &#x3C;= right)\n    {\n        int mid = (left + right) / 2;\n        if (arr[mid] == target)\n            return mid;\n        else if (arr[mid] > target)\n            right = mid + 1;\n        else\n            left = mid + 1;\n    }\n    return -1;\n}\n\n</code></pre>\n<pre><code>// Write a programme for a binary search\nimport java.util.Arrays;\n\npublic class binarySearch {\n\n  public static void main(String[] args) {\n    int array[] = { 10, 20, 30, 50, 60, 80 };\n    int target = 30;\n\n    System.out.println(\"Input  : \" + Arrays.toString(array));\n    System.out.println(\"Target : \" + target);\n\n    System.out.print(\"\\nOutput : \");\n    int result = binarySearchFunction(array, target);\n    if (result == -1) {\n      System.out.println(\"Target Not Found !!!\");\n    } else {\n      System.out.println(\"Found at index \" + result);\n    }\n  }\n\n  public static int binarySearchFunction(int[] array, int target) {\n    int start = 0;\n    int end = array.length - 1;\n    while (start &#x3C;= end) {\n      int mid = (start + end) / 2;\n      int midValue = array[mid];\n      if (midValue &#x3C; target) {\n        start = mid + 1;\n      } else if (midValue > target) {\n        end = mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -start - 1;\n  }\n}\n\n</code></pre>\n<pre><code># Write a programme for binary search\n\nfunction binary_search(list, query; rev=false, lt=&#x3C;, by=identity)\n    if issorted(list) || issorted(list; rev=true)\n        low = !rev ? 1 : length(list)\n        high = !rev ? length(list) : 1\n        middle(l, h) = round(Int, (l + h) // 2)\n        query = by(query)\n\n        while !rev ? low &#x3C;= high : high &#x3C;= low\n            mid = middle(low, high)\n            by(list[mid]) === query &#x26;&#x26; return mid:mid\n            if lt(by(list[mid]), query)\n                low = !rev ? mid + 1 : mid - 1\n            else\n                high = !rev ? mid - 1 : mid + 1\n            end\n        end\n        return !rev ? (low:high) : (high:low)\n\n    else\n        throw(error(\"List not sorted, unable to search value\"))\n    end\nend\n\narray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntarget = 9\n\nprintln(\"Input  : \", array)\nprintln(\"Target : \", target)\nprintln(\"Output : \", binary_search(array, target))\n\n</code></pre>\n<pre><code># Write a programme for binary search\n\ndef binarySearch(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low &#x3C;= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] &#x3C; target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\n# get array from user\narr = input(\"Enter array  : \").split()\narr = [int(i) for i in arr]\ntarget = int(input(\"Enter target : \"))\n\nif binarySearch(arr, target) == -1:\n    print(\"\\nOutput : Target not found\")\nelse:\n    print(\"\\nOutput :\", binarySearch(arr, target))\n\n</code></pre>\n<pre><code>// Write a programme for binary search\nuse std::cmp::Ordering;\n\npub fn find&#x3C;R: AsRef&#x3C;[T]>, T: Ord>(space: R, key: T) -> Option&#x3C;usize> {\n    let space = space.as_ref();\n    let mid = space.len() / 2;\n    match key.cmp(space.get(mid)?) {\n        Ordering::Equal => Some(mid),\n        Ordering::Less => find(&#x26;space[..mid], key),\n        Ordering::Greater => find(&#x26;space[mid + 1..], key).map(|i| i + mid + 1),\n    }\n}\n\npub fn main() {\n    let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    let target = 5;\n    println!(\"Array  : {:?}\", array);\n    println!(\"Target : {}\", target);\n    println!(\"Index  : {}\", find(&#x26;array, target).unwrap());\n}\n\n</code></pre>\n","markdown":"\n## Binary Search\n\nBinary search is searching algorithm with which given a sorted array it is able to search for a target by repeatedly dividing the search interval in half making use of the fact that the array is sorted and achieving much lower time complexity compared to linear search. \n\n```txt\nInput  : 10 20 30 50 60 80\nTarget : 30\n\nOutput : 2\n```\n\n```txt\nTime Complexity : O(Log n)\n```\n\n```txt\nSpace Complexity : O(1)\n```\n\n---\n\n\n<CodeBlock>\n        \n```go\n// Write a programme for binary search\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar arr []int\n\tfmt.Print(\"Enter the size of array : \")\n\tvar size int\n\tfmt.Scan(&size)\n\n\tfor i := 0; i < size; i++ {\n\t\tvar elem int\n\t\tfmt.Print(\"Enter element : \")\n\t\tfmt.Scan(&elem)\n\t\tarr = append(arr, elem)\n\t}\n\tvar n int\n\tfmt.Print(\"\\nEnter a number : \")\n\tfmt.Scan(&n)\n\tfmt.Println(\"\\nOutput :\", n, \"is found at index\", binarySearch(arr, n))\n}\n\nfunc binarySearch(arr []int, n int) int {\n\tvar low int = 0\n\tvar high int = len(arr) - 1\n\tvar mid int\n\tfor low <= high {\n\t\tmid = (low + high) / 2\n\t\tif arr[mid] == n {\n\t\t\treturn mid\n\t\t} else if arr[mid] < n {\n\t\t\tlow = mid + 1\n\t\t} else {\n\t\t\thigh = mid - 1\n\t\t}\n\t}\n\treturn -1\n}\n\n```\n                \n```cs\n// Write a programme for binary search\nusing System;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        int[] example = new int[] { 10, 20, 30, 50, 60, 80 };\n        int target = 30;\n\n        string stringExample = printArray(example);\n        Console.WriteLine($\"Input  : {stringExample}\");\n        Console.WriteLine($\"Target : {target}\");\n        Console.WriteLine($\"\\nOutput : {BinarySearch(example, target)}\");\n    }\n\n    public static string printArray(int[] array)\n    {\n        string stringExample = \"\";\n        for (int i = 0; i < array.Length; i++)\n        {\n            stringExample += $\"{array[i]} \";\n        }\n        return stringExample;\n    }\n\n    public static object BinarySearch(int[] inputArray, int key)\n    {\n        int min = 0;\n        int max = inputArray.Length - 1;\n        while (min <= max)\n        {\n            int mid = (min + max) / 2;\n            if (key == inputArray[mid])\n            {\n                return mid++;\n            }\n            else if (key < inputArray[mid])\n            {\n                max = mid - 1;\n            }\n            else\n            {\n                min = mid + 1;\n            }\n        }\n        return \"Nil\";\n    }\n}\n\n```\n                \n```c\n// Write a programme for binary search\n#include <stdio.h>\n\nint binarySearch(int array[], int x, int low, int high)\n{\n  // Repeat until the pointers low and high meet each other\n  while (low <= high)\n  {\n    int mid = low + (high - low) / 2;\n\n    if (array[mid] == x)\n      return mid;\n\n    if (array[mid] < x)\n      low = mid + 1;\n\n    else\n      high = mid - 1;\n  }\n\n  return -1;\n}\n\nint main(void)\n{\n  int array[] = {10, 20, 30, 50, 60, 80};\n  int n = sizeof(array) / sizeof(array[0]);\n  int x = 30;\n  printf(\"Array  : \");\n  for (int i = 0; i < n; i++)\n    printf(\"%d \", array[i]);\n  printf(\"\\nTarget : %d\\n\", x);\n  int result = binarySearch(array, x, 0, n - 1);\n  printf(\"Output : \");\n  if (result == -1)\n    printf(\"Not found\");\n  else\n    printf(\"%d\", result);\n  printf(\"\\n\");\n  return 0;\n}\n\n```\n                \n```js\n// Write a programme for binary search\nconst binarySearch = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    } else if (arr[mid] <= target) {\n      low = mid + 1;\n    } else if (arr[mid] >= target) {\n      high = mid - 1;\n    }\n  }\n  return -1;\n};\n\nconst arr = [10, 20, 30, 40, 50];\nconst target = 30;\n\nconsole.log(\"Input  : \", arr);\nconsole.log(\"Target : \", target);\nconsole.log(\"Output : \", binarySearch(arr, target));\n\n```\n                \n```php\n<?php\n/**\n * Binary search implementation\n *\n * @param array $arr The sorted array\n * @param int $value The value needs to be search in an array\n * @return int The index of the search key if found, otherwise -1\n */\nfunction binarySearch($arr, $value)\n{\n\n    $low = 0;\n    $high = count($arr) - 1;\n    while ($low <= $high) {\n        //calculate mid\n        $mid = ($low + $high) / 2;\n/*\nIf value we are searching found at mid position\nthen return it's index\n */\n        if ($value == $arr[$mid]) {\n            return $mid;\n        } else if ($value < $arr[$mid]) {\n            $high = $mid - 1;\n        } else if ($value > $arr[$mid + 1]) {\n            $low = $mid + 1;\n        }\n    }\n    return -1;\n}\n$arr = array(1, 3, 5, 6, 7, 8, 9);\n$value = 6;\n\necho \"Array  : \" . implode(', ', $arr) . \"\\n\";\necho \"Target : \" . $value . \"\\n\";\n\n/* Call binary search function,\nwhich returns index at which value is found.\n */\n\n$index = binarySearch($arr, $value);\n\necho \"Output : \";\n//if index is -1, then value is not present\nif ($index == -1) {\n    echo \"search key is not found\";\n} else {\n    echo \"search element is found at index \" . $index;\n}\necho \"\\n\";\n\n```\n                \n```cpp\n// write a programme for binary search\n#include <iostream>\n\nusing namespace std;\n\nint binary_search(int *tab, int size, int target);\n\nint main()\n{\n    int input[] = {10, 20, 30, 50, 60, 80};\n    int target = 30;\n\n    cout << \"Input  : \";\n    for (int i = 0; i < 6; i++)\n    {\n        cout << input[i] << \" \";\n    }\n\n    cout << \"\\nTarget : \" << target << endl;\n    \n    int result = binary_search(input, sizeof(input) / sizeof(int), target);\n    cout << \"\\nOutput : \";\n    if (result == -1)\n    {\n        cout << \"Not found\" << endl;\n    }\n    else\n    {\n        cout << \"Found at index \" << result << endl;\n    }\n\n    return 0;\n}\n\nint binary_search(int *arr, int size, int target)\n{\n\n    int left = 0,\n        right = size - 1;\n\n    while (left <= right)\n    {\n        int mid = (left + right) / 2;\n        if (arr[mid] == target)\n            return mid;\n        else if (arr[mid] > target)\n            right = mid + 1;\n        else\n            left = mid + 1;\n    }\n    return -1;\n}\n\n```\n                \n```java\n// Write a programme for a binary search\nimport java.util.Arrays;\n\npublic class binarySearch {\n\n  public static void main(String[] args) {\n    int array[] = { 10, 20, 30, 50, 60, 80 };\n    int target = 30;\n\n    System.out.println(\"Input  : \" + Arrays.toString(array));\n    System.out.println(\"Target : \" + target);\n\n    System.out.print(\"\\nOutput : \");\n    int result = binarySearchFunction(array, target);\n    if (result == -1) {\n      System.out.println(\"Target Not Found !!!\");\n    } else {\n      System.out.println(\"Found at index \" + result);\n    }\n  }\n\n  public static int binarySearchFunction(int[] array, int target) {\n    int start = 0;\n    int end = array.length - 1;\n    while (start <= end) {\n      int mid = (start + end) / 2;\n      int midValue = array[mid];\n      if (midValue < target) {\n        start = mid + 1;\n      } else if (midValue > target) {\n        end = mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -start - 1;\n  }\n}\n\n```\n                \n```julia\n# Write a programme for binary search\n\nfunction binary_search(list, query; rev=false, lt=<, by=identity)\n    if issorted(list) || issorted(list; rev=true)\n        low = !rev ? 1 : length(list)\n        high = !rev ? length(list) : 1\n        middle(l, h) = round(Int, (l + h) // 2)\n        query = by(query)\n\n        while !rev ? low <= high : high <= low\n            mid = middle(low, high)\n            by(list[mid]) === query && return mid:mid\n            if lt(by(list[mid]), query)\n                low = !rev ? mid + 1 : mid - 1\n            else\n                high = !rev ? mid - 1 : mid + 1\n            end\n        end\n        return !rev ? (low:high) : (high:low)\n\n    else\n        throw(error(\"List not sorted, unable to search value\"))\n    end\nend\n\narray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntarget = 9\n\nprintln(\"Input  : \", array)\nprintln(\"Target : \", target)\nprintln(\"Output : \", binary_search(array, target))\n\n```\n                \n```python\n# Write a programme for binary search\n\ndef binarySearch(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\n# get array from user\narr = input(\"Enter array  : \").split()\narr = [int(i) for i in arr]\ntarget = int(input(\"Enter target : \"))\n\nif binarySearch(arr, target) == -1:\n    print(\"\\nOutput : Target not found\")\nelse:\n    print(\"\\nOutput :\", binarySearch(arr, target))\n\n```\n                \n```rust\n// Write a programme for binary search\nuse std::cmp::Ordering;\n\npub fn find<R: AsRef<[T]>, T: Ord>(space: R, key: T) -> Option<usize> {\n    let space = space.as_ref();\n    let mid = space.len() / 2;\n    match key.cmp(space.get(mid)?) {\n        Ordering::Equal => Some(mid),\n        Ordering::Less => find(&space[..mid], key),\n        Ordering::Greater => find(&space[mid + 1..], key).map(|i| i + mid + 1),\n    }\n}\n\npub fn main() {\n    let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    let target = 5;\n    println!(\"Array  : {:?}\", array);\n    println!(\"Target : {}\", target);\n    println!(\"Index  : {}\", find(&array, target).unwrap());\n}\n\n```\n                \n</CodeBlock>\n          \n        "}