{"slug":"binary-search","title":"Binary Search","description":"Binary search is searching algorithm with which given a sorted array it is able to search for a target by repeatedly dividing the search interval in half making use of the fact that the array is sorted and achieving much lower time complexity compared to linear search.","image":"https://raw.githubusercontent.com/codinasion/codinasion-dsa/master/programme/binary-search/binary-search.png","tags":["cs","go","py","java"],"contributors":["RogerMReyes","Darren-R","ihammadasghar","MadhuS-1605"],"latestUpdateDate":"2022-07-16T14:10:50Z","contentHtml":"<h2>Binary Search</h2>\n<p>Binary search is searching algorithm with which given a sorted array it is able to search for a target by repeatedly dividing the search interval in half making use of the fact that the array is sorted and achieving much lower time complexity compared to linear search.</p>\n<pre><code>Input  : 10 20 30 50 60 80\nTarget : 30\n\nOutput : 2\n</code></pre>\n<pre><code>Time Complexity : O(Log n)\n</code></pre>\n<pre><code>Space Complexity : O(1)\n</code></pre>\n<hr>\n<pre><code>// Write a programme for binary search\nusing System;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        int[] example = new int[] { 10, 20, 30, 50, 60, 80 };\n        int target = 30;\n\n        string stringExample = printArray(example);\n        Console.WriteLine($\"Input  : {stringExample}\");\n        Console.WriteLine($\"Target : {target}\");\n        Console.WriteLine($\"\\nOutput : {BinarySearch(example, target)}\");\n    }\n\n    public static string printArray(int[] array)\n    {\n        string stringExample = \"\";\n        for (int i = 0; i &#x3C; array.Length; i++)\n        {\n            stringExample += $\"{array[i]} \";\n        }\n        return stringExample;\n    }\n\n    public static object BinarySearch(int[] inputArray, int key)\n    {\n        int min = 0;\n        int max = inputArray.Length - 1;\n        while (min &#x3C;= max)\n        {\n            int mid = (min + max) / 2;\n            if (key == inputArray[mid])\n            {\n                return mid++;\n            }\n            else if (key &#x3C; inputArray[mid])\n            {\n                max = mid - 1;\n            }\n            else\n            {\n                min = mid + 1;\n            }\n        }\n        return \"Nil\";\n    }\n}\n\n</code></pre>\n<pre><code># Write a programme for binary search\n\ndef binarySearch(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low &#x3C;= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] &#x3C; target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\n# get array from user\narr = input(\"Enter array  : \").split()\narr = [int(i) for i in arr]\ntarget = int(input(\"Enter target : \"))\n\nif binarySearch(arr, target) == -1:\n    print(\"\\nOutput : Target not found\")\nelse:\n    print(\"\\nOutput :\", binarySearch(arr, target))\n\n</code></pre>\n<pre><code>// Write a programme for a binary search\nimport java.util.Arrays;\n\npublic class binarySearch {\n\n  public static void main(String[] args) {\n    int array[] = { 10, 20, 30, 50, 60, 80 };\n    int target = 30;\n\n    System.out.println(\"Input  : \" + Arrays.toString(array));\n    System.out.println(\"Target : \" + target);\n\n    System.out.print(\"\\nOutput : \");\n    int result = binarySearchFunction(array, target);\n    if (result == -1) {\n      System.out.println(\"Target Not Found !!!\");\n    } else {\n      System.out.println(\"Found at index \" + result);\n    }\n  }\n\n  public static int binarySearchFunction(int[] array, int target) {\n    int start = 0;\n    int end = array.length - 1;\n    while (start &#x3C;= end) {\n      int mid = (start + end) / 2;\n      int midValue = array[mid];\n      if (midValue &#x3C; target) {\n        start = mid + 1;\n      } else if (midValue > target) {\n        end = mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -start - 1;\n  }\n}\n\n</code></pre>\n<pre><code>// Write a programme for binary search\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar arr []int\n\tfmt.Print(\"Enter the size of array : \")\n\tvar size int\n\tfmt.Scan(&#x26;size)\n\n\tfor i := 0; i &#x3C; size; i++ {\n\t\tvar elem int\n\t\tfmt.Print(\"Enter element : \")\n\t\tfmt.Scan(&#x26;elem)\n\t\tarr = append(arr, elem)\n\t}\n\tvar n int\n\tfmt.Print(\"\\nEnter a number : \")\n\tfmt.Scan(&#x26;n)\n\tfmt.Println(\"\\nOutput :\", n, \"is found at index\", binarySearch(arr, n))\n}\n\nfunc binarySearch(arr []int, n int) int {\n\tvar low int = 0\n\tvar high int = len(arr) - 1\n\tvar mid int\n\tfor low &#x3C;= high {\n\t\tmid = (low + high) / 2\n\t\tif arr[mid] == n {\n\t\t\treturn mid\n\t\t} else if arr[mid] &#x3C; n {\n\t\t\tlow = mid + 1\n\t\t} else {\n\t\t\thigh = mid - 1\n\t\t}\n\t}\n\treturn -1\n}\n\n</code></pre>\n","markdown":"\n## Binary Search\n\nBinary search is searching algorithm with which given a sorted array it is able to search for a target by repeatedly dividing the search interval in half making use of the fact that the array is sorted and achieving much lower time complexity compared to linear search. \n\n```txt\nInput  : 10 20 30 50 60 80\nTarget : 30\n\nOutput : 2\n```\n\n```txt\nTime Complexity : O(Log n)\n```\n\n```txt\nSpace Complexity : O(1)\n```\n\n---\n\n\n<CodeBlock>\n        \n```cs\n// Write a programme for binary search\nusing System;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        int[] example = new int[] { 10, 20, 30, 50, 60, 80 };\n        int target = 30;\n\n        string stringExample = printArray(example);\n        Console.WriteLine($\"Input  : {stringExample}\");\n        Console.WriteLine($\"Target : {target}\");\n        Console.WriteLine($\"\\nOutput : {BinarySearch(example, target)}\");\n    }\n\n    public static string printArray(int[] array)\n    {\n        string stringExample = \"\";\n        for (int i = 0; i < array.Length; i++)\n        {\n            stringExample += $\"{array[i]} \";\n        }\n        return stringExample;\n    }\n\n    public static object BinarySearch(int[] inputArray, int key)\n    {\n        int min = 0;\n        int max = inputArray.Length - 1;\n        while (min <= max)\n        {\n            int mid = (min + max) / 2;\n            if (key == inputArray[mid])\n            {\n                return mid++;\n            }\n            else if (key < inputArray[mid])\n            {\n                max = mid - 1;\n            }\n            else\n            {\n                min = mid + 1;\n            }\n        }\n        return \"Nil\";\n    }\n}\n\n```\n                \n```python\n# Write a programme for binary search\n\ndef binarySearch(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\n# get array from user\narr = input(\"Enter array  : \").split()\narr = [int(i) for i in arr]\ntarget = int(input(\"Enter target : \"))\n\nif binarySearch(arr, target) == -1:\n    print(\"\\nOutput : Target not found\")\nelse:\n    print(\"\\nOutput :\", binarySearch(arr, target))\n\n```\n                \n```java\n// Write a programme for a binary search\nimport java.util.Arrays;\n\npublic class binarySearch {\n\n  public static void main(String[] args) {\n    int array[] = { 10, 20, 30, 50, 60, 80 };\n    int target = 30;\n\n    System.out.println(\"Input  : \" + Arrays.toString(array));\n    System.out.println(\"Target : \" + target);\n\n    System.out.print(\"\\nOutput : \");\n    int result = binarySearchFunction(array, target);\n    if (result == -1) {\n      System.out.println(\"Target Not Found !!!\");\n    } else {\n      System.out.println(\"Found at index \" + result);\n    }\n  }\n\n  public static int binarySearchFunction(int[] array, int target) {\n    int start = 0;\n    int end = array.length - 1;\n    while (start <= end) {\n      int mid = (start + end) / 2;\n      int midValue = array[mid];\n      if (midValue < target) {\n        start = mid + 1;\n      } else if (midValue > target) {\n        end = mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -start - 1;\n  }\n}\n\n```\n                \n```go\n// Write a programme for binary search\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar arr []int\n\tfmt.Print(\"Enter the size of array : \")\n\tvar size int\n\tfmt.Scan(&size)\n\n\tfor i := 0; i < size; i++ {\n\t\tvar elem int\n\t\tfmt.Print(\"Enter element : \")\n\t\tfmt.Scan(&elem)\n\t\tarr = append(arr, elem)\n\t}\n\tvar n int\n\tfmt.Print(\"\\nEnter a number : \")\n\tfmt.Scan(&n)\n\tfmt.Println(\"\\nOutput :\", n, \"is found at index\", binarySearch(arr, n))\n}\n\nfunc binarySearch(arr []int, n int) int {\n\tvar low int = 0\n\tvar high int = len(arr) - 1\n\tvar mid int\n\tfor low <= high {\n\t\tmid = (low + high) / 2\n\t\tif arr[mid] == n {\n\t\t\treturn mid\n\t\t} else if arr[mid] < n {\n\t\t\tlow = mid + 1\n\t\t} else {\n\t\t\thigh = mid - 1\n\t\t}\n\t}\n\treturn -1\n}\n\n```\n                \n</CodeBlock>\n          \n        "}