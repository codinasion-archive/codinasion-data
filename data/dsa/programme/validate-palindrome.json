{"slug":"validate-palindrome","title":"Validate Palindrome String","description":"In Palindrome algorithm, we simply reverse the the input String. If the two strig are equals then return True, otherwise, the algorithm returns False.","image":"https://raw.githubusercontent.com/codinasion/codinasion-dsa/master/programme/validate-palindrome/validate-palindrome.png","tags":["c","cpp","cs","go","jl","js","php","py","rs","java"],"contributors":["PaoloFer","JefvdA","Darren-R","nohno2","MadhuS-1605","applepiesNX","SpirosArk"],"latestUpdateDate":"2022-07-21T03:13:28Z","contentHtml":"<h2>Palindrome</h2>\n<p>A string is said to be palindrome if the reverse of the string is the same as string. For example, “level” is a palindrome, but “coding” is not a palindrome.</p>\n<pre><code>Input  : 1) \"level\"   2) \"coding\"   3) \"121\"  \n\nOutput : 1)   True    2)   False    3)  True\n\n</code></pre>\n<p>Steps :-</p>\n<pre><code>Input_string:   1) \"level\"  2) \"coding\"   3)  \"121\"\n\nReverse string: 1) \"level\"  2) \"gnidoc\"   3)  \"121\"\n\n1)  Input string is euqals to Reverse string    --> True\n\n2)  Input string is different to Reverse string --> False\n\n3)  Input string is equals to Reverse string    --> True\n</code></pre>\n<pre><code>Time Complexity : O(n)\n</code></pre>\n<pre><code>Space Complexity : O(1)\n</code></pre>\n<hr>\n<pre><code>// Write a programme to validate palindrome\n// We assume that given input string is all lowered letters and also that the string has no spaces\n// Because it is a char to char comparison it also works if we give a number as string input\n\n#include &#x3C;stdio.h>\n#include &#x3C;string.h>\n\n// A function to check if a given string is palindrome\nvoid isPalindrome(char input[])\n{\n  // 2 variables, in order to access first and last chars of input array\n  int firstCharOfArray = 0;\n  int lastCharOfArray = strlen(input) - 1;\n\n  // Keep comparing characters while there are characters\n  while (lastCharOfArray > firstCharOfArray)\n  {\n    if (input[firstCharOfArray++] != input[lastCharOfArray--])\n    {\n      printf(\"%s is not a palindrome\\n\\n\", input);\n      return;\n    }\n  }\n  printf(\"%s is a palindrome\\n\\n\", input);\n}\n\n// Script to check above code\nint main()\n{\n  // Words Tests\n  isPalindrome(\"coding\");\n  isPalindrome(\"level\");\n  isPalindrome(\"example\");\n\n  // Number Tests\n  isPalindrome(\"121\");\n  isPalindrome(\"2022\");\n\n  // Mixed Tests\n  isPalindrome(\"a1b2c2b1a\");\n  isPalindrome(\"123ab321\");\n}\n\n</code></pre>\n<pre><code>// Write a programme to Validate Palindrom string\n\nfunction palindrome(str) {\n  var re = /[\\W_]/g;\n\n  var lowRegStr = str.toLowerCase().replace(re, \"\");\n\n  var reverseStr = lowRegStr.split(\"\").reverse().join(\"\");\n\n  return reverseStr === lowRegStr;\n}\n\nconst str1 = \"level\";\nconsole.log(\"Input  : \" + str1);\nconsole.log(\"Output : \" + palindrome(str1));\n\nconsole.log(\"\\n\");\n\nconst str2 = \"coding\";\nconsole.log(\"Input  : \" + str2);\nconsole.log(\"Output : \" + palindrome(str2));\n\n</code></pre>\n<pre><code># Write a programme to Validate Palindrom string\n\ndef validPalindrome(s):\n    lowString = s.lower()\n\n    reverse_string = lowString[::-1]\n\n    return s == reverse_string\n\n\nexample1 = \"level\"\nprint(\"Input  :\", example1)\nprint(\"Output :\", validPalindrome(example1))\n\nexample2 = \"coding\"\nprint(\"\\nInput  :\", example2)\nprint(\"Output :\", validPalindrome(example2))\n\n</code></pre>\n<pre><code>// Write a programme to Validate Palindrome string\r\n#include &#x3C;string>\r\n#include &#x3C;iostream>\r\n\r\nusing namespace std;\r\n\r\nstring validPalindrome(string s)\r\n{\r\n\r\n    // Automatically returns true if the string is empty\r\n    if (s.length() == 0)\r\n    {\r\n        return \"True\";\r\n    }\r\n\r\n    int i = 0;\r\n\r\n    // Turns all cases of the string to lower case\r\n    while (i &#x3C; s.length())\r\n    {\r\n        s[i] = tolower(s[i]);\r\n        i++;\r\n    }\r\n\r\n    string reverse = \"\";\r\n\r\n    i = s.length() - 1;\r\n    while (reverse.length() != s.length())\r\n    {\r\n        reverse.push_back(s[i]);\r\n        i--;\r\n    }\r\n\r\n    if (reverse.compare(s) == 0)\r\n    {\r\n        return \"True\";\r\n    }\r\n    else\r\n    {\r\n        return \"False\";\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    string i;\r\n    cout &#x3C;&#x3C; \"Input  : \";\r\n    cin >> i;\r\n    cout &#x3C;&#x3C; \"Output : \" &#x3C;&#x3C; validPalindrome(i) &#x3C;&#x3C; endl;\r\n\r\n    return 0;\r\n}\r\n\n</code></pre>\n<pre><code>// Write a programme to validate palindrome\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar str string\n\tfmt.Print(\"Enter a string : \")\n\tfmt.Scan(&#x26;str)\n\tfmt.Println(\"\\nIs '\"+str+\"' a palindrome : \", isPalindrome(str))\n}\n\nfunc isPalindrome(str string) bool {\n\tvar i, j int\n\ti = 0\n\tj = len(str) - 1\n\tfor i &#x3C; j {\n\t\tif str[i] != str[j] {\n\t\t\treturn false\n\t\t}\n\t\ti++\n\t\tj--\n\t}\n\treturn true\n}\n\n</code></pre>\n<pre><code>// Write a programme to validate palindrome\n\nclass Main {\n\n  public static void main(String[] args) {\n    String str1 = \"level\";\n    System.out.println(\"Input  : \" + str1);\n    System.out.println(\"Output : \" + isPalindrome(str1));\n\n    System.out.println();\n\n    String str2 = \"coding\";\n    System.out.println(\"Input  : \" + str2);\n    System.out.println(\"Output : \" + isPalindrome(str2));\n  }\n\n  private static boolean isPalindrome(String s) {\n    String lowString = s.toLowerCase();\n\n    String reverseString = new StringBuilder(lowString).reverse().toString();\n\n    return lowString.equals(reverseString);\n  }\n}\n\n</code></pre>\n<pre><code># Write a programme to validate palindrome\n\nfunction palindrome(input)\n    reversed = join(reverse(split(input, \"\")), \"\")\n    return input == reversed\nend\n\ninput = \"madam\"\nprintln(\"Input  : \", input)\nprintln(\"Output : \", palindrome(input))\n\n</code></pre>\n<pre><code>&#x3C;?php\r\n// Write a programme to validate palindrome\r\n\r\nfunction Palindrome($MyString)\r\n{\r\n    $l = 0;\r\n    $r = strlen($MyString) - 1;\r\n    $flag = 0;\r\n\r\n    while ($r > $l) {\r\n        if ($MyString[$l] != $MyString[$r]) {\r\n            $flag = 1;\r\n            break;\r\n        }\r\n        $l++;\r\n        $r--;\r\n    }\r\n\r\n    if ($flag == 0) {\r\n\r\n        echo \"True\\n\";\r\n    } else {\r\n        echo \"False\\n\";\r\n    }\r\n}\r\n\r\n$input = \"radar\";\r\necho \"Input  : \" . $input . \"\\n\";\r\necho \"Output : \";\r\nPalindrome($input);\r\n\n</code></pre>\n<pre><code>// Write a programme to Validate Palindrom string\nuse std::io::{self, Write};\n\nfn validate_palindrome(s: &#x26;mut String) -> bool {\n    //convert input string to lowercase in place\n    s.make_ascii_lowercase();\n    //reverse the input string\n    let reverse_string: String = s.chars().rev().collect();\n    //compare reversed string with input string\n    if *s == reverse_string {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let mut input = String::new();\n    print!(\"Input  : \");\n    let _ = io::stdout().flush();\n    io::stdin()\n        .read_line(&#x26;mut input)\n        .expect(\"Error reading from STDIN\");\n    let is_palindrome = validate_palindrome(&#x26;mut input);\n    println!(\"Output : {}\", is_palindrome);\n}\n\n</code></pre>\n<pre><code>// Write a programme to validate palindrome\nusing System;\n\nnamespace validPalindrome\n{\n    internal class Program\n    {\n        static bool validPalindrome(string s)\n        {\n            string lowString = s.ToLower();\n\n            string reverseString = string.Empty;\n            for (int i = lowString.Length - 1; i >= 0; i--)\n            {\n                reverseString += lowString[i];\n            }\n            return s == reverseString;\n        }\n\n        static void Main(string[] args)\n        {\n            string example1 = \"level\";\n            Console.WriteLine($\"Input  : {example1}\");\n            Console.WriteLine($\"Output : {validPalindrome(example1)}\");\n        }\n    }\n}\n\n</code></pre>\n","markdown":"\n## Palindrome\n\nA string is said to be palindrome if the reverse of the string is the same as string. For example, “level” is a palindrome, but “coding” is not a palindrome.\n\n```txt\nInput  : 1) \"level\"   2) \"coding\"   3) \"121\"  \n\nOutput : 1)   True    2)   False    3)  True\n\n```\n\nSteps :-\n\n```txt\nInput_string:   1) \"level\"  2) \"coding\"   3)  \"121\"\n\nReverse string: 1) \"level\"  2) \"gnidoc\"   3)  \"121\"\n\n1)  Input string is euqals to Reverse string    --> True\n\n2)  Input string is different to Reverse string --> False\n\n3)  Input string is equals to Reverse string    --> True\n```\n\n```txt\nTime Complexity : O(n)\n```\n\n```txt\nSpace Complexity : O(1)\n```\n\n---\n\n\n<CodeBlock>\n        \n```c\n// Write a programme to validate palindrome\n// We assume that given input string is all lowered letters and also that the string has no spaces\n// Because it is a char to char comparison it also works if we give a number as string input\n\n#include <stdio.h>\n#include <string.h>\n\n// A function to check if a given string is palindrome\nvoid isPalindrome(char input[])\n{\n  // 2 variables, in order to access first and last chars of input array\n  int firstCharOfArray = 0;\n  int lastCharOfArray = strlen(input) - 1;\n\n  // Keep comparing characters while there are characters\n  while (lastCharOfArray > firstCharOfArray)\n  {\n    if (input[firstCharOfArray++] != input[lastCharOfArray--])\n    {\n      printf(\"%s is not a palindrome\\n\\n\", input);\n      return;\n    }\n  }\n  printf(\"%s is a palindrome\\n\\n\", input);\n}\n\n// Script to check above code\nint main()\n{\n  // Words Tests\n  isPalindrome(\"coding\");\n  isPalindrome(\"level\");\n  isPalindrome(\"example\");\n\n  // Number Tests\n  isPalindrome(\"121\");\n  isPalindrome(\"2022\");\n\n  // Mixed Tests\n  isPalindrome(\"a1b2c2b1a\");\n  isPalindrome(\"123ab321\");\n}\n\n```\n                \n```js\n// Write a programme to Validate Palindrom string\n\nfunction palindrome(str) {\n  var re = /[\\W_]/g;\n\n  var lowRegStr = str.toLowerCase().replace(re, \"\");\n\n  var reverseStr = lowRegStr.split(\"\").reverse().join(\"\");\n\n  return reverseStr === lowRegStr;\n}\n\nconst str1 = \"level\";\nconsole.log(\"Input  : \" + str1);\nconsole.log(\"Output : \" + palindrome(str1));\n\nconsole.log(\"\\n\");\n\nconst str2 = \"coding\";\nconsole.log(\"Input  : \" + str2);\nconsole.log(\"Output : \" + palindrome(str2));\n\n```\n                \n```python\n# Write a programme to Validate Palindrom string\n\ndef validPalindrome(s):\n    lowString = s.lower()\n\n    reverse_string = lowString[::-1]\n\n    return s == reverse_string\n\n\nexample1 = \"level\"\nprint(\"Input  :\", example1)\nprint(\"Output :\", validPalindrome(example1))\n\nexample2 = \"coding\"\nprint(\"\\nInput  :\", example2)\nprint(\"Output :\", validPalindrome(example2))\n\n```\n                \n```cpp\n// Write a programme to Validate Palindrome string\r\n#include <string>\r\n#include <iostream>\r\n\r\nusing namespace std;\r\n\r\nstring validPalindrome(string s)\r\n{\r\n\r\n    // Automatically returns true if the string is empty\r\n    if (s.length() == 0)\r\n    {\r\n        return \"True\";\r\n    }\r\n\r\n    int i = 0;\r\n\r\n    // Turns all cases of the string to lower case\r\n    while (i < s.length())\r\n    {\r\n        s[i] = tolower(s[i]);\r\n        i++;\r\n    }\r\n\r\n    string reverse = \"\";\r\n\r\n    i = s.length() - 1;\r\n    while (reverse.length() != s.length())\r\n    {\r\n        reverse.push_back(s[i]);\r\n        i--;\r\n    }\r\n\r\n    if (reverse.compare(s) == 0)\r\n    {\r\n        return \"True\";\r\n    }\r\n    else\r\n    {\r\n        return \"False\";\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    string i;\r\n    cout << \"Input  : \";\r\n    cin >> i;\r\n    cout << \"Output : \" << validPalindrome(i) << endl;\r\n\r\n    return 0;\r\n}\r\n\n```\n                \n```go\n// Write a programme to validate palindrome\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar str string\n\tfmt.Print(\"Enter a string : \")\n\tfmt.Scan(&str)\n\tfmt.Println(\"\\nIs '\"+str+\"' a palindrome : \", isPalindrome(str))\n}\n\nfunc isPalindrome(str string) bool {\n\tvar i, j int\n\ti = 0\n\tj = len(str) - 1\n\tfor i < j {\n\t\tif str[i] != str[j] {\n\t\t\treturn false\n\t\t}\n\t\ti++\n\t\tj--\n\t}\n\treturn true\n}\n\n```\n                \n```java\n// Write a programme to validate palindrome\n\nclass Main {\n\n  public static void main(String[] args) {\n    String str1 = \"level\";\n    System.out.println(\"Input  : \" + str1);\n    System.out.println(\"Output : \" + isPalindrome(str1));\n\n    System.out.println();\n\n    String str2 = \"coding\";\n    System.out.println(\"Input  : \" + str2);\n    System.out.println(\"Output : \" + isPalindrome(str2));\n  }\n\n  private static boolean isPalindrome(String s) {\n    String lowString = s.toLowerCase();\n\n    String reverseString = new StringBuilder(lowString).reverse().toString();\n\n    return lowString.equals(reverseString);\n  }\n}\n\n```\n                \n```julia\n# Write a programme to validate palindrome\n\nfunction palindrome(input)\n    reversed = join(reverse(split(input, \"\")), \"\")\n    return input == reversed\nend\n\ninput = \"madam\"\nprintln(\"Input  : \", input)\nprintln(\"Output : \", palindrome(input))\n\n```\n                \n```php\n<?php\r\n// Write a programme to validate palindrome\r\n\r\nfunction Palindrome($MyString)\r\n{\r\n    $l = 0;\r\n    $r = strlen($MyString) - 1;\r\n    $flag = 0;\r\n\r\n    while ($r > $l) {\r\n        if ($MyString[$l] != $MyString[$r]) {\r\n            $flag = 1;\r\n            break;\r\n        }\r\n        $l++;\r\n        $r--;\r\n    }\r\n\r\n    if ($flag == 0) {\r\n\r\n        echo \"True\\n\";\r\n    } else {\r\n        echo \"False\\n\";\r\n    }\r\n}\r\n\r\n$input = \"radar\";\r\necho \"Input  : \" . $input . \"\\n\";\r\necho \"Output : \";\r\nPalindrome($input);\r\n\n```\n                \n```rust\n// Write a programme to Validate Palindrom string\nuse std::io::{self, Write};\n\nfn validate_palindrome(s: &mut String) -> bool {\n    //convert input string to lowercase in place\n    s.make_ascii_lowercase();\n    //reverse the input string\n    let reverse_string: String = s.chars().rev().collect();\n    //compare reversed string with input string\n    if *s == reverse_string {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let mut input = String::new();\n    print!(\"Input  : \");\n    let _ = io::stdout().flush();\n    io::stdin()\n        .read_line(&mut input)\n        .expect(\"Error reading from STDIN\");\n    let is_palindrome = validate_palindrome(&mut input);\n    println!(\"Output : {}\", is_palindrome);\n}\n\n```\n                \n```cs\n// Write a programme to validate palindrome\nusing System;\n\nnamespace validPalindrome\n{\n    internal class Program\n    {\n        static bool validPalindrome(string s)\n        {\n            string lowString = s.ToLower();\n\n            string reverseString = string.Empty;\n            for (int i = lowString.Length - 1; i >= 0; i--)\n            {\n                reverseString += lowString[i];\n            }\n            return s == reverseString;\n        }\n\n        static void Main(string[] args)\n        {\n            string example1 = \"level\";\n            Console.WriteLine($\"Input  : {example1}\");\n            Console.WriteLine($\"Output : {validPalindrome(example1)}\");\n        }\n    }\n}\n\n```\n                \n</CodeBlock>\n          \n        "}