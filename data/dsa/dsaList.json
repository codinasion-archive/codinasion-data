[{"title":"Binary Search","description":"Binary search is searching algorithm with which given a sorted array it is able to search for a target by repeatedly dividing the search interval in half making use of the fact that the array is sorted and achieving much lower time complexity compared to linear search.","image":"https://raw.githubusercontent.com/codinasion/codinasion-dsa/master/programme/binary-search/binary-search.png","tags":["cs","c","cpp","go","jl","js","php","py","rs","java"],"slug":"binary-search"},{"title":"Bubble Sort","description":"Bubble sort is a simple sorting algorithm. This sorting algorithm is comparison-based algorithm in which each pair of adjacent elements is compared and the elements are swapped if they are not in order.","image":"https://raw.githubusercontent.com/codinasion/codinasion-dsa/master/programme/bubble-sort/bubble-sort.png","tags":["java","py","rs","jl"],"slug":"bubble-sort"},{"title":"Heap Sort","description":"Heap sort is a comparison-based sorting technique based on Binary Heap data structure. It is similar to the selection sort where we first find the minimum element and place the minimum element at the beginning. Repeat the same process for the remaining elements. Heap sort is an in-place algorithm.","image":"https://raw.githubusercontent.com/codinasion/codinasion-dsa/master/programme/heap-sort/heap-sort.png","tags":["cpp","py"],"slug":"heap-sort"},{"title":"Insertion Sort","description":"Insertion sort is a sorting algorithm in which the elements are transferred one at a time to the right position. In other words, an insertion sort helps in building the final sorted list, one item at a time, with the movement of higher-ranked elements.","image":"https://raw.githubusercontent.com/codinasion/codinasion-dsa/master/programme/insertion-sort/insertion-sort.png","tags":["cpp","py","js"],"slug":"insertion-sort"},{"title":"Linear Search","description":"Linear search is the simplest searching algorithm. In Linear search, we simply traverse the list completely and match each element of the list with the target item, whose location is to be found. If the match is found, then the location of the item is returned. Otherwise, the algorithm returns NULL.","image":"https://raw.githubusercontent.com/codinasion/codinasion-dsa/master/programme/linear-search/linear-search.png","tags":["cs","java","c","cpp","go","jl","js","php","py","rs"],"slug":"linear-search"},{"title":"Merge Sort","description":"The Merge Sort algorithm is a sorting algorithm that is considered an example of the divide and conquer strategy. So, in this algorithm, the array is initially divided into two equal halves and then they are combined in a sorted manner.","image":"https://raw.githubusercontent.com/codinasion/codinasion/master/image/og/default.png","tags":["c","cpp","js"],"slug":"merge-sort"},{"title":"Quick Sort","description":"QuickSort is a Divide and Conquer algorithm. It picks an element as pivot, and then it partitions the given array around the picked pivot element. In quick sort, a large array is divided into two arrays in which one holds values that are smaller than the specified value (Pivot), and another array holds the values that are greater than the pivot. After that, left and right sub-arrays are also partitioned using the same approach. It will continue until the single element remains in the sub-array.","image":"https://raw.githubusercontent.com/codinasion/codinasion-dsa/master/programme/quick-sort/quick-sort.png","tags":["java","c","cpp","js","py","rs"],"slug":"quick-sort"},{"title":"Selection Sort","description":"Selection sort algorithm sorts an array by repeatedly finding the minimum element from unsorted part and putting it at the beginning.","image":"https://raw.githubusercontent.com/codinasion/codinasion-dsa/master/programme/selection-sort/selection-sort.png","tags":["c","cpp","java","js","py"],"slug":"selection-sort"},{"title":"Validate Palindrome String","description":"In Palindrome algorithm, we simply reverse the the input String. If the two strig are equals then return True, otherwise, the algorithm returns False.","image":"https://raw.githubusercontent.com/codinasion/codinasion-dsa/master/programme/validate-palindrome/validate-palindrome.png","tags":["c","cpp","cs","go","jl","js","php","py","rs","java"],"slug":"validate-palindrome"}]